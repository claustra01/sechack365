/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * SecHack365
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
	Actor,
	Auth,
	Error400,
	Error401,
	Error404,
	Error500,
	GetApiV1DevMock200,
	GetApiV1DevMock404,
	GetApiV1DevMock500,
	GetApiV1DevReset200,
	GetApiV1DevReset404,
	GetApiV1DevReset500,
	GetWellKnownWebfingerParams,
	Newpost,
	Nodeinfo,
	Post,
	PostApiV1AuthLogout200,
	User,
	WellknownNodeinfo,
	WellknownWebfinger,
} from "./schemas";

/**
 * @summary Login
 */
export const postApiV1AuthLogin = (
	auth: Auth,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.post("/api/v1/auth/login", auth, options);
};

export const getPostApiV1AuthLoginMutationOptions = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1AuthLogin>>,
		TError,
		{ data: Auth },
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiV1AuthLogin>>,
	TError,
	{ data: Auth },
	TContext
> => {
	const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1AuthLogin>>,
		{ data: Auth }
	> = (props) => {
		const { data } = props ?? {};

		return postApiV1AuthLogin(data, axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthLoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1AuthLogin>>
>;
export type PostApiV1AuthLoginMutationBody = Auth;
export type PostApiV1AuthLoginMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Login
 */
export const usePostApiV1AuthLogin = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1AuthLogin>>,
		TError,
		{ data: Auth },
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<
	Awaited<ReturnType<typeof postApiV1AuthLogin>>,
	TError,
	{ data: Auth },
	TContext
> => {
	const mutationOptions = getPostApiV1AuthLoginMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * @summary Logout
 */
export const postApiV1AuthLogout = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1AuthLogout200>> => {
	return axios.post("/api/v1/auth/logout", undefined, options);
};

export const getPostApiV1AuthLogoutMutationOptions = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1AuthLogout>>,
		TError,
		void,
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiV1AuthLogout>>,
	TError,
	void,
	TContext
> => {
	const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1AuthLogout>>,
		void
	> = () => {
		return postApiV1AuthLogout(axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthLogoutMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1AuthLogout>>
>;

export type PostApiV1AuthLogoutMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Logout
 */
export const usePostApiV1AuthLogout = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1AuthLogout>>,
		TError,
		void,
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<
	Awaited<ReturnType<typeof postApiV1AuthLogout>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getPostApiV1AuthLogoutMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * @summary Get All Users (for debug)
 */
export const getApiV1Users = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get("/api/v1/users", options);
};

export const getGetApiV1UsersQueryKey = () => {
	return ["/api/v1/users"] as const;
};

export const getGetApiV1UsersQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Users>>,
	TError = AxiosError<Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>> = ({
		signal,
	}) => getApiV1Users({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1Users>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Users>>
>;
export type GetApiV1UsersQueryError = AxiosError<Error500>;

export function useGetApiV1Users<
	TData = Awaited<ReturnType<typeof getApiV1Users>>,
	TError = AxiosError<Error500>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Users>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Users<
	TData = Awaited<ReturnType<typeof getApiV1Users>>,
	TError = AxiosError<Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Users>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Users<
	TData = Awaited<ReturnType<typeof getApiV1Users>>,
	TError = AxiosError<Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get All Users (for debug)
 */

export function useGetApiV1Users<
	TData = Awaited<ReturnType<typeof getApiV1Users>>,
	TError = AxiosError<Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get User by ID
 */
export const getApiV1UsersId = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User | Actor>> => {
	return axios.get(`/api/v1/users/${id}`, options);
};

export const getGetApiV1UsersIdQueryKey = (id: string) => {
	return [`/api/v1/users/${id}`] as const;
};

export const getGetApiV1UsersIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({
		signal,
	}) => getApiV1UsersId(id, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1UsersId>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersId>>
>;
export type GetApiV1UsersIdQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1UsersId<
	TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersId>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersId<
	TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersId>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersId<
	TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get User by ID
 */

export function useGetApiV1UsersId<
	TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersIdQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Current User
 */
export const getApiV1UsersMe = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.get("/api/v1/users/me", options);
};

export const getGetApiV1UsersMeQueryKey = () => {
	return ["/api/v1/users/me"] as const;
};

export const getGetApiV1UsersMeQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({
		signal,
	}) => getApiV1UsersMe({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1UsersMe>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersMeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersMe>>
>;
export type GetApiV1UsersMeQueryError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

export function useGetApiV1UsersMe<
	TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1UsersMe>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersMe<
	TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1UsersMe>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersMe<
	TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Current User
 */

export function useGetApiV1UsersMe<
	TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersMeQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Follows of User
 */
export const getApiV1UsersIdFollows = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get(`/api/v1/users/${id}/follows`, options);
};

export const getGetApiV1UsersIdFollowsQueryKey = (id: string) => {
	return [`/api/v1/users/${id}/follows`] as const;
};

export const getGetApiV1UsersIdFollowsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiV1UsersIdFollowsQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1UsersIdFollows>>
	> = ({ signal }) => getApiV1UsersIdFollows(id, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersIdFollowsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdFollows>>
>;
export type GetApiV1UsersIdFollowsQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1UsersIdFollows<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdFollows<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdFollows<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Follows of User
 */

export function useGetApiV1UsersIdFollows<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersIdFollowsQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Followers of User
 */
export const getApiV1UsersIdFollowers = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get(`/api/v1/users/${id}/followers`, options);
};

export const getGetApiV1UsersIdFollowersQueryKey = (id: string) => {
	return [`/api/v1/users/${id}/followers`] as const;
};

export const getGetApiV1UsersIdFollowersQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiV1UsersIdFollowersQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>
	> = ({ signal }) => getApiV1UsersIdFollowers(id, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersIdFollowersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>
>;
export type GetApiV1UsersIdFollowersQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1UsersIdFollowers<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdFollowers<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdFollowers<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Followers of User
 */

export function useGetApiV1UsersIdFollowers<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersIdFollowersQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Latest Posts of User
 */
export const getApiV1UsersIdPosts = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post[]>> => {
	return axios.get(`/api/v1/users/${id}/posts`, options);
};

export const getGetApiV1UsersIdPostsQueryKey = (id: string) => {
	return [`/api/v1/users/${id}/posts`] as const;
};

export const getGetApiV1UsersIdPostsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiV1UsersIdPostsQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1UsersIdPosts>>
	> = ({ signal }) => getApiV1UsersIdPosts(id, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1UsersIdPostsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdPosts>>
>;
export type GetApiV1UsersIdPostsQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1UsersIdPosts<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdPosts<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1UsersIdPosts<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Latest Posts of User
 */

export function useGetApiV1UsersIdPosts<
	TData = Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1UsersIdPostsQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Lookup (Remote/Local) User
 */
export const getApiV1LookupUsername = (
	username: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.get(`/api/v1/lookup/${username}`, options);
};

export const getGetApiV1LookupUsernameQueryKey = (username: string) => {
	return [`/api/v1/lookup/${username}`] as const;
};

export const getGetApiV1LookupUsernameQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1LookupUsername>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1LookupUsername>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiV1LookupUsernameQueryKey(username);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1LookupUsername>>
	> = ({ signal }) =>
		getApiV1LookupUsername(username, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!username,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1LookupUsername>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1LookupUsernameQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1LookupUsername>>
>;
export type GetApiV1LookupUsernameQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1LookupUsername<
	TData = Awaited<ReturnType<typeof getApiV1LookupUsername>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1LookupUsername>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1LookupUsername>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LookupUsername<
	TData = Awaited<ReturnType<typeof getApiV1LookupUsername>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1LookupUsername>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1LookupUsername>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LookupUsername<
	TData = Awaited<ReturnType<typeof getApiV1LookupUsername>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1LookupUsername>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Lookup (Remote/Local) User
 */

export function useGetApiV1LookupUsername<
	TData = Awaited<ReturnType<typeof getApiV1LookupUsername>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1LookupUsername>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1LookupUsernameQueryOptions(username, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create Post
 */
export const postApiV1Posts = (
	newpost: Newpost,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post>> => {
	return axios.post("/api/v1/posts", newpost, options);
};

export const getPostApiV1PostsMutationOptions = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		TError,
		{ data: Newpost },
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiV1Posts>>,
	TError,
	{ data: Newpost },
	TContext
> => {
	const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		{ data: Newpost }
	> = (props) => {
		const { data } = props ?? {};

		return postApiV1Posts(data, axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1Posts>>
>;
export type PostApiV1PostsMutationBody = Newpost;
export type PostApiV1PostsMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Create Post
 */
export const usePostApiV1Posts = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		TError,
		{ data: Newpost },
		TContext
	>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<
	Awaited<ReturnType<typeof postApiV1Posts>>,
	TError,
	{ data: Newpost },
	TContext
> => {
	const mutationOptions = getPostApiV1PostsMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * @summary Get Post by ID
 */
export const getApiV1PostsId = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post>> => {
	return axios.get(`/api/v1/posts/${id}`, options);
};

export const getGetApiV1PostsIdQueryKey = (id: string) => {
	return [`/api/v1/posts/${id}`] as const;
};

export const getGetApiV1PostsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1PostsId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1PostsId>>> = ({
		signal,
	}) => getApiV1PostsId(id, { signal, ...axiosOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1PostsId>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1PostsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1PostsId>>
>;
export type GetApiV1PostsIdQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1PostsId<
	TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1PostsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1PostsId>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1PostsId<
	TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1PostsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiV1PostsId>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1PostsId<
	TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1PostsId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Post by ID
 */

export function useGetApiV1PostsId<
	TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiV1PostsId>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1PostsIdQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Get Timeline
 */
export const getApiV1Timeline = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post[]>> => {
	return axios.get("/api/v1/timeline", options);
};

export const getGetApiV1TimelineQueryKey = () => {
	return ["/api/v1/timeline"] as const;
};

export const getGetApiV1TimelineQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Timeline>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Timeline>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1TimelineQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1Timeline>>
	> = ({ signal }) => getApiV1Timeline({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1Timeline>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1TimelineQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Timeline>>
>;
export type GetApiV1TimelineQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetApiV1Timeline<
	TData = Awaited<ReturnType<typeof getApiV1Timeline>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Timeline>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Timeline>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Timeline<
	TData = Awaited<ReturnType<typeof getApiV1Timeline>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Timeline>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Timeline>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Timeline<
	TData = Awaited<ReturnType<typeof getApiV1Timeline>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Timeline>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Timeline
 */

export function useGetApiV1Timeline<
	TData = Awaited<ReturnType<typeof getApiV1Timeline>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1Timeline>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1TimelineQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary NodeInfo 2.0
 */
export const getApiV1Nodeinfo20 = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Nodeinfo>> => {
	return axios.get("/api/v1/nodeinfo/2.0", options);
};

export const getGetApiV1Nodeinfo20QueryKey = () => {
	return ["/api/v1/nodeinfo/2.0"] as const;
};

export const getGetApiV1Nodeinfo20QueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1Nodeinfo20QueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1Nodeinfo20>>
	> = ({ signal }) => getApiV1Nodeinfo20({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1Nodeinfo20QueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Nodeinfo20>>
>;
export type GetApiV1Nodeinfo20QueryError = AxiosError<unknown>;

export function useGetApiV1Nodeinfo20<
	TData = Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
	TError = AxiosError<unknown>,
>(options: {
	query: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
			TError,
			TData
		>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Nodeinfo20<
	TData = Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
			TError,
			TData
		>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Nodeinfo20<
	TData = Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary NodeInfo 2.0
 */

export function useGetApiV1Nodeinfo20<
	TData = Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1Nodeinfo20QueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary NodeInfo
 */
export const getWellKnownNodeinfo = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<WellknownNodeinfo>> => {
	return axios.get("/.well-known/nodeinfo", options);
};

export const getGetWellKnownNodeinfoQueryKey = () => {
	return ["/.well-known/nodeinfo"] as const;
};

export const getGetWellKnownNodeinfoQueryOptions = <
	TData = Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetWellKnownNodeinfoQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getWellKnownNodeinfo>>
	> = ({ signal }) => getWellKnownNodeinfo({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetWellKnownNodeinfoQueryResult = NonNullable<
	Awaited<ReturnType<typeof getWellKnownNodeinfo>>
>;
export type GetWellKnownNodeinfoQueryError = AxiosError<unknown>;

export function useGetWellKnownNodeinfo<
	TData = Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
	TError = AxiosError<unknown>,
>(options: {
	query: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
			TError,
			TData
		>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWellKnownNodeinfo<
	TData = Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
			TError,
			TData
		>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWellKnownNodeinfo<
	TData = Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary NodeInfo
 */

export function useGetWellKnownNodeinfo<
	TData = Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
	TError = AxiosError<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
			TError,
			TData
		>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetWellKnownNodeinfoQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary WebFinger
 */
export const getWellKnownWebfinger = (
	params: GetWellKnownWebfingerParams,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<WellknownWebfinger>> => {
	return axios.get("/.well-known/webfinger", {
		...options,
		params: { ...params, ...options?.params },
	});
};

export const getGetWellKnownWebfingerQueryKey = (
	params: GetWellKnownWebfingerParams,
) => {
	return ["/.well-known/webfinger", ...(params ? [params] : [])] as const;
};

export const getGetWellKnownWebfingerQueryOptions = <
	TData = Awaited<ReturnType<typeof getWellKnownWebfinger>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWellKnownWebfinger>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetWellKnownWebfingerQueryKey(params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getWellKnownWebfinger>>
	> = ({ signal }) =>
		getWellKnownWebfinger(params, { signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getWellKnownWebfinger>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetWellKnownWebfingerQueryResult = NonNullable<
	Awaited<ReturnType<typeof getWellKnownWebfinger>>
>;
export type GetWellKnownWebfingerQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

export function useGetWellKnownWebfinger<
	TData = Awaited<ReturnType<typeof getWellKnownWebfinger>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWellKnownWebfinger>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getWellKnownWebfinger>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWellKnownWebfinger<
	TData = Awaited<ReturnType<typeof getWellKnownWebfinger>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWellKnownWebfinger>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getWellKnownWebfinger>>,
					TError,
					TData
				>,
				"initialData"
			>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWellKnownWebfinger<
	TData = Awaited<ReturnType<typeof getWellKnownWebfinger>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWellKnownWebfinger>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary WebFinger
 */

export function useGetWellKnownWebfinger<
	TData = Awaited<ReturnType<typeof getWellKnownWebfinger>>,
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getWellKnownWebfinger>>,
				TError,
				TData
			>
		>;
		axios?: AxiosRequestConfig;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetWellKnownWebfingerQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Generate Mock
 */
export const getApiV1DevMock = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1DevMock200>> => {
	return axios.get("/api/v1/dev/mock", options);
};

export const getGetApiV1DevMockQueryKey = () => {
	return ["/api/v1/dev/mock"] as const;
};

export const getGetApiV1DevMockQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1DevMock>>,
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevMock>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1DevMockQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1DevMock>>> = ({
		signal,
	}) => getApiV1DevMock({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1DevMock>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1DevMockQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1DevMock>>
>;
export type GetApiV1DevMockQueryError = AxiosError<
	GetApiV1DevMock404 | GetApiV1DevMock500
>;

export function useGetApiV1DevMock<
	TData = Awaited<ReturnType<typeof getApiV1DevMock>>,
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevMock>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1DevMock>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DevMock<
	TData = Awaited<ReturnType<typeof getApiV1DevMock>>,
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevMock>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1DevMock>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DevMock<
	TData = Awaited<ReturnType<typeof getApiV1DevMock>>,
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevMock>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Generate Mock
 */

export function useGetApiV1DevMock<
	TData = Awaited<ReturnType<typeof getApiV1DevMock>>,
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevMock>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1DevMockQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Reset Database
 */
export const getApiV1DevReset = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1DevReset200>> => {
	return axios.get("/api/v1/dev/reset", options);
};

export const getGetApiV1DevResetQueryKey = () => {
	return ["/api/v1/dev/reset"] as const;
};

export const getGetApiV1DevResetQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiV1DevReset>>,
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevReset>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiV1DevResetQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiV1DevReset>>
	> = ({ signal }) => getApiV1DevReset({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiV1DevReset>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetApiV1DevResetQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1DevReset>>
>;
export type GetApiV1DevResetQueryError = AxiosError<
	GetApiV1DevReset404 | GetApiV1DevReset500
>;

export function useGetApiV1DevReset<
	TData = Awaited<ReturnType<typeof getApiV1DevReset>>,
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevReset>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1DevReset>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DevReset<
	TData = Awaited<ReturnType<typeof getApiV1DevReset>>,
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevReset>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getApiV1DevReset>>,
				TError,
				TData
			>,
			"initialData"
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DevReset<
	TData = Awaited<ReturnType<typeof getApiV1DevReset>>,
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevReset>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Reset Database
 */

export function useGetApiV1DevReset<
	TData = Awaited<ReturnType<typeof getApiV1DevReset>>,
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiV1DevReset>>, TError, TData>
	>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetApiV1DevResetQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
