/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * SecHack365
 * OpenAPI spec version: 0.1.0
 */
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";
import type {
	Actor,
	Auth,
	Error400,
	Error401,
	Error404,
	Error500,
	GetApiV1DevMock200,
	GetApiV1DevMock404,
	GetApiV1DevMock500,
	GetApiV1DevReset200,
	GetApiV1DevReset404,
	GetApiV1DevReset500,
	GetWellKnownWebfingerParams,
	Newpost,
	Nodeinfo,
	Post,
	PostApiV1AuthLogout200,
	User,
	WellknownNodeinfo,
	WellknownWebfinger,
} from "./schemas";

/**
 * @summary Login
 */
export const postApiV1AuthLogin = (
	auth: Auth,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.post("/api/v1/auth/login", auth, options);
};

export const getPostApiV1AuthLoginMutationFetcher = (
	options?: AxiosRequestConfig,
) => {
	return (_: Key, { arg }: { arg: Auth }): Promise<AxiosResponse<User>> => {
		return postApiV1AuthLogin(arg, options);
	};
};
export const getPostApiV1AuthLoginMutationKey = () =>
	["/api/v1/auth/login"] as const;

export type PostApiV1AuthLoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1AuthLogin>>
>;
export type PostApiV1AuthLoginMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Login
 */
export const usePostApiV1AuthLogin = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof postApiV1AuthLogin>>,
		TError,
		Key,
		Auth,
		Awaited<ReturnType<typeof postApiV1AuthLogin>>
	> & { swrKey?: string };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getPostApiV1AuthLoginMutationKey();
	const swrFn = getPostApiV1AuthLoginMutationFetcher(axiosOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Logout
 */
export const postApiV1AuthLogout = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1AuthLogout200>> => {
	return axios.post("/api/v1/auth/logout", undefined, options);
};

export const getPostApiV1AuthLogoutMutationFetcher = (
	options?: AxiosRequestConfig,
) => {
	return (
		_: Key,
		__: { arg: Arguments },
	): Promise<AxiosResponse<PostApiV1AuthLogout200>> => {
		return postApiV1AuthLogout(options);
	};
};
export const getPostApiV1AuthLogoutMutationKey = () =>
	["/api/v1/auth/logout"] as const;

export type PostApiV1AuthLogoutMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1AuthLogout>>
>;
export type PostApiV1AuthLogoutMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Logout
 */
export const usePostApiV1AuthLogout = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof postApiV1AuthLogout>>,
		TError,
		Key,
		Arguments,
		Awaited<ReturnType<typeof postApiV1AuthLogout>>
	> & { swrKey?: string };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getPostApiV1AuthLogoutMutationKey();
	const swrFn = getPostApiV1AuthLogoutMutationFetcher(axiosOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get All Users (for debug)
 */
export const getApiV1Users = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get("/api/v1/users", options);
};

export const getGetApiV1UsersKey = () => ["/api/v1/users"] as const;

export type GetApiV1UsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Users>>
>;
export type GetApiV1UsersQueryError = AxiosError<Error500>;

/**
 * @summary Get All Users (for debug)
 */
export const useGetApiV1Users = <TError = AxiosError<Error500>>(options?: {
	swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiV1Users>>, TError> & {
		swrKey?: Key;
		enabled?: boolean;
	};
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersKey() : null));
	const swrFn = () => getApiV1Users(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get User by ID
 */
export const getApiV1UsersId = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User | Actor>> => {
	return axios.get(`/api/v1/users/${id}`, options);
};

export const getGetApiV1UsersIdKey = (id: string) =>
	[`/api/v1/users/${id}`] as const;

export type GetApiV1UsersIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersId>>
>;
export type GetApiV1UsersIdQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get User by ID
 */
export const useGetApiV1UsersId = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1UsersId>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!id;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1UsersIdKey(id) : null));
	const swrFn = () => getApiV1UsersId(id, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Current User
 */
export const getApiV1UsersMe = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.get("/api/v1/users/me", options);
};

export const getGetApiV1UsersMeKey = () => ["/api/v1/users/me"] as const;

export type GetApiV1UsersMeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersMe>>
>;
export type GetApiV1UsersMeQueryError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Get Current User
 */
export const useGetApiV1UsersMe = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getApiV1UsersMe>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1UsersMeKey() : null));
	const swrFn = () => getApiV1UsersMe(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Follows of User
 */
export const getApiV1UsersIdFollows = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get(`/api/v1/users/${id}/follows`, options);
};

export const getGetApiV1UsersIdFollowsKey = (id: string) =>
	[`/api/v1/users/${id}/follows`] as const;

export type GetApiV1UsersIdFollowsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdFollows>>
>;
export type GetApiV1UsersIdFollowsQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get Follows of User
 */
export const useGetApiV1UsersIdFollows = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1UsersIdFollows>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!id;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1UsersIdFollowsKey(id) : null));
	const swrFn = () => getApiV1UsersIdFollows(id, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Followers of User
 */
export const getApiV1UsersIdFollowers = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User[]>> => {
	return axios.get(`/api/v1/users/${id}/followers`, options);
};

export const getGetApiV1UsersIdFollowersKey = (id: string) =>
	[`/api/v1/users/${id}/followers`] as const;

export type GetApiV1UsersIdFollowersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>
>;
export type GetApiV1UsersIdFollowersQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get Followers of User
 */
export const useGetApiV1UsersIdFollowers = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1UsersIdFollowers>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!id;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1UsersIdFollowersKey(id) : null));
	const swrFn = () => getApiV1UsersIdFollowers(id, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Latest Posts of User
 */
export const getApiV1UsersIdPosts = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post[]>> => {
	return axios.get(`/api/v1/users/${id}/posts`, options);
};

export const getGetApiV1UsersIdPostsKey = (id: string) =>
	[`/api/v1/users/${id}/posts`] as const;

export type GetApiV1UsersIdPostsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1UsersIdPosts>>
>;
export type GetApiV1UsersIdPostsQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get Latest Posts of User
 */
export const useGetApiV1UsersIdPosts = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1UsersIdPosts>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!id;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1UsersIdPostsKey(id) : null));
	const swrFn = () => getApiV1UsersIdPosts(id, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Lookup (Remote/Local) User
 */
export const getApiV1LookupUsername = (
	username: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
	return axios.get(`/api/v1/lookup/${username}`, options);
};

export const getGetApiV1LookupUsernameKey = (username: string) =>
	[`/api/v1/lookup/${username}`] as const;

export type GetApiV1LookupUsernameQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1LookupUsername>>
>;
export type GetApiV1LookupUsernameQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Lookup (Remote/Local) User
 */
export const useGetApiV1LookupUsername = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	username: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1LookupUsername>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!username;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1LookupUsernameKey(username) : null));
	const swrFn = () => getApiV1LookupUsername(username, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Create Post
 */
export const postApiV1Posts = (
	newpost: Newpost,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post>> => {
	return axios.post("/api/v1/posts", newpost, options);
};

export const getPostApiV1PostsMutationFetcher = (
	options?: AxiosRequestConfig,
) => {
	return (_: Key, { arg }: { arg: Newpost }): Promise<AxiosResponse<Post>> => {
		return postApiV1Posts(arg, options);
	};
};
export const getPostApiV1PostsMutationKey = () => ["/api/v1/posts"] as const;

export type PostApiV1PostsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiV1Posts>>
>;
export type PostApiV1PostsMutationError = AxiosError<
	Error400 | Error401 | Error404 | Error500
>;

/**
 * @summary Create Post
 */
export const usePostApiV1Posts = <
	TError = AxiosError<Error400 | Error401 | Error404 | Error500>,
>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof postApiV1Posts>>,
		TError,
		Key,
		Newpost,
		Awaited<ReturnType<typeof postApiV1Posts>>
	> & { swrKey?: string };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getPostApiV1PostsMutationKey();
	const swrFn = getPostApiV1PostsMutationFetcher(axiosOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Post by ID
 */
export const getApiV1PostsId = (
	id: string,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post>> => {
	return axios.get(`/api/v1/posts/${id}`, options);
};

export const getGetApiV1PostsIdKey = (id: string) =>
	[`/api/v1/posts/${id}`] as const;

export type GetApiV1PostsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1PostsId>>
>;
export type GetApiV1PostsIdQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get Post by ID
 */
export const useGetApiV1PostsId = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	id: string,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getApiV1PostsId>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false && !!id;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1PostsIdKey(id) : null));
	const swrFn = () => getApiV1PostsId(id, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Get Timeline
 */
export const getApiV1Timeline = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Post[]>> => {
	return axios.get("/api/v1/timeline", options);
};

export const getGetApiV1TimelineKey = () => ["/api/v1/timeline"] as const;

export type GetApiV1TimelineQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Timeline>>
>;
export type GetApiV1TimelineQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary Get Timeline
 */
export const useGetApiV1Timeline = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getApiV1Timeline>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1TimelineKey() : null));
	const swrFn = () => getApiV1Timeline(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary NodeInfo 2.0
 */
export const getApiV1Nodeinfo20 = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<Nodeinfo>> => {
	return axios.get("/api/v1/nodeinfo/2.0", options);
};

export const getGetApiV1Nodeinfo20Key = () => ["/api/v1/nodeinfo/2.0"] as const;

export type GetApiV1Nodeinfo20QueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1Nodeinfo20>>
>;
export type GetApiV1Nodeinfo20QueryError = AxiosError<unknown>;

/**
 * @summary NodeInfo 2.0
 */
export const useGetApiV1Nodeinfo20 = <TError = AxiosError<unknown>>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getApiV1Nodeinfo20>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetApiV1Nodeinfo20Key() : null));
	const swrFn = () => getApiV1Nodeinfo20(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary NodeInfo
 */
export const getWellKnownNodeinfo = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<WellknownNodeinfo>> => {
	return axios.get("/.well-known/nodeinfo", options);
};

export const getGetWellKnownNodeinfoKey = () =>
	["/.well-known/nodeinfo"] as const;

export type GetWellKnownNodeinfoQueryResult = NonNullable<
	Awaited<ReturnType<typeof getWellKnownNodeinfo>>
>;
export type GetWellKnownNodeinfoQueryError = AxiosError<unknown>;

/**
 * @summary NodeInfo
 */
export const useGetWellKnownNodeinfo = <
	TError = AxiosError<unknown>,
>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getWellKnownNodeinfo>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetWellKnownNodeinfoKey() : null));
	const swrFn = () => getWellKnownNodeinfo(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary WebFinger
 */
export const getWellKnownWebfinger = (
	params: GetWellKnownWebfingerParams,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<WellknownWebfinger>> => {
	return axios.get("/.well-known/webfinger", {
		...options,
		params: { ...params, ...options?.params },
	});
};

export const getGetWellKnownWebfingerKey = (
	params: GetWellKnownWebfingerParams,
) => ["/.well-known/webfinger", ...(params ? [params] : [])] as const;

export type GetWellKnownWebfingerQueryResult = NonNullable<
	Awaited<ReturnType<typeof getWellKnownWebfinger>>
>;
export type GetWellKnownWebfingerQueryError = AxiosError<
	Error400 | Error404 | Error500
>;

/**
 * @summary WebFinger
 */
export const useGetWellKnownWebfinger = <
	TError = AxiosError<Error400 | Error404 | Error500>,
>(
	params: GetWellKnownWebfingerParams,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof getWellKnownWebfinger>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		axios?: AxiosRequestConfig;
	},
) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getGetWellKnownWebfingerKey(params) : null));
	const swrFn = () => getWellKnownWebfinger(params, axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Generate Mock
 */
export const getApiV1DevMock = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1DevMock200>> => {
	return axios.get("/api/v1/dev/mock", options);
};

export const getGetApiV1DevMockKey = () => ["/api/v1/dev/mock"] as const;

export type GetApiV1DevMockQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1DevMock>>
>;
export type GetApiV1DevMockQueryError = AxiosError<
	GetApiV1DevMock404 | GetApiV1DevMock500
>;

/**
 * @summary Generate Mock
 */
export const useGetApiV1DevMock = <
	TError = AxiosError<GetApiV1DevMock404 | GetApiV1DevMock500>,
>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getApiV1DevMock>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1DevMockKey() : null));
	const swrFn = () => getApiV1DevMock(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * @summary Reset Database
 */
export const getApiV1DevReset = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1DevReset200>> => {
	return axios.get("/api/v1/dev/reset", options);
};

export const getGetApiV1DevResetKey = () => ["/api/v1/dev/reset"] as const;

export type GetApiV1DevResetQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiV1DevReset>>
>;
export type GetApiV1DevResetQueryError = AxiosError<
	GetApiV1DevReset404 | GetApiV1DevReset500
>;

/**
 * @summary Reset Database
 */
export const useGetApiV1DevReset = <
	TError = AxiosError<GetApiV1DevReset404 | GetApiV1DevReset500>,
>(options?: {
	swr?: SWRConfiguration<
		Awaited<ReturnType<typeof getApiV1DevReset>>,
		TError
	> & { swrKey?: Key; enabled?: boolean };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiV1DevResetKey() : null));
	const swrFn = () => getApiV1DevReset(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};
