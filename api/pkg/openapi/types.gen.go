// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Identifiers struct {
		Activitypub *struct {
			Host          *string `json:"host,omitempty"`
			LocalUsername *string `json:"local_username,omitempty"`
			PublicKey     *string `json:"public_key,omitempty"`
		} `json:"activitypub,omitempty"`
		Nostr *struct {
			PublicKey *string `json:"public_key,omitempty"`
		} `json:"nostr,omitempty"`
	} `json:"identifiers"`
	Profile   string    `json:"profile"`
	Protocol  string    `json:"protocol"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OscShLm+rqXRYvFPAAAA//8KY83aljUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
