// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *struct {
		Host          *string `json:"host,omitempty"`
		LocalUsername *string `json:"local_username,omitempty"`
		PublicKey     *string `json:"public_key,omitempty"`
	} `json:"activitypub,omitempty"`
	Nostr *struct {
		PublicKey *string `json:"public_key,omitempty"`
	} `json:"nostr,omitempty"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId   string `json:"post_id"`
	Reaction string `json:"reaction"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	LikeCount *int      `json:"like_count,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	User      PostUser  `json:"user"`
}

// PostUser defines model for post-user.
type PostUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
