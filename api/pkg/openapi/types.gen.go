// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownNostrJsonParams defines parameters for GetWellKnownNostrJson.
type GetWellKnownNostrJsonParams struct {
	Name string `form:"name" json:"name"`
}

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Fov/BwAA//8O1iw6uWIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
