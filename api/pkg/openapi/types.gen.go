// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *struct {
		Host          *string `json:"host,omitempty"`
		LocalUsername *string `json:"local_username,omitempty"`
		PublicKey     *string `json:"public_key,omitempty"`
	} `json:"activitypub,omitempty"`
	Nostr *struct {
		PublicKey *string `json:"public_key,omitempty"`
	} `json:"nostr,omitempty"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	LikeCount *int      `json:"like_count,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	User      PostUser  `json:"user"`
}

// PostUser defines model for post-user.
type PostUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTXPbONL+Kyy87yGppUw7cbYqOiWTjLOu8WS9zmZzSLlcENmUMaYABgDtaF3671sA",
	"CBIUQYrySJEy9iUfZqPxdPcDdKNB+h7FbJYzClQKNL5HOeZ4BhK4/h9J9J8UjVGO5TUKEcUzQGP1IEQc",
	"vhWEQ4LGkhcQIhFfwwyrEXKeKykhOaFTtFiEiKWpAFlp+1YAn9fqyqceFYRKmALXOgoB3AzwYqoe9yGD",
	"73iWZ4DGX9EbNQCF5u835YODmM2UyryYHL14iScxugw95tzBJCVUAeuwiINgBY8HgkE4juXYg2N55oUd",
	"rsODY8k0gpyzHLgkoH/8JmZUwnftbUbhnykaf23FJLxHRMJMeMJVTYs5x3O0uFyEiMSMKtH/55CiMfq/",
	"qKZNVCKKNJyRllQjEq9qQifsu/eJDW3rAStk15icQwqcQ/LZ4UZbqphkJP4N5sMsqMWVu4vZDPN5j5t8",
	"dK9j/rUORzkgNKvHOKKyzmdL6ZMaRBkH16KanmzyB8RS4XIC0SJHB+YQFTxbbUtpgJLtnrjh7ubsHaRg",
	"d9Qspe7QncPsT8TAdbyZbEm115pCXrdNyLEQd4z7DSm6abiEyNmtKo0+EMA546Pjw8M2khkIgafQ3El+",
	"wUlwAd8KELK9f4RISCwLcRWzpDnu+PAw9O25LmR3bFjN3gf6aCDoz1T5mnHyX0jWQ320BdTHA1F/ZDI4",
	"YQVdE/LxFiC/Hgj5HaNpRuI1qfF644hfDebzKZVqoWTBJ+C3wINf1fh14L/aKLNJAlSSlJQFUtMAHEty",
	"S+Q8Lybth9dMSO+ekbEYZ1fF6gR2dQNz/8bSgkmZkJ7KYE09Xs1wl7IsY3ee1IL5FOSVd49f3o8r0Uv/",
	"HBm5AQ9+Jjr014mgps6Z0hEOywxWcwecvAxeE45O7FSuNtcKerWzBAhNmW89SJxgiVdVLVbDqBqgUmoO",
	"9AKmREiOJWFUa0wgxUUm0TjFmYAKzISxDDA1BRWTLGaZyda2QKzGNSgeriocQySA35LYmDPIhHKAHstS",
	"eYc5DB9rB+hEXO4kg0Ya6UWIboELYsqm2uYXB4cradR2t+tLxxgLzfFNWEe6RtBHlZHLjG4p68t2FUYn",
	"Om35Ruty1P9wyWSrxRnTC9qNZxOP3fdqlwuIr3F88/Lvr3ws80bp8OBoQJzKkmuQlysONdGqnVqsR62R",
	"GeOrAcUADKNqyqUNl0mcdRyWG3uclrvsyhMjDhn2FOsxBywhucJ6h0sZn6l/oQRLGEkyA19ouk594goo",
	"nmRuenN2nSJP1p5p0HlFF/xK0oUQupY1Jve5aN2tP9yk31QavIpZ0ZipCvMDHSfMWauPvspozboOj5rO",
	"iXWCwTkyONf37sgiaro4ISLP8PyqsyqyB1xPV8BsvBs8olmNYRNWCcJnmd+oh3BjpSNMQdbHEyMBvE+m",
	"051da7pZCvfRyRUtg96HJOcsJRk8ILYPXA7D+FBRfyUprAFVv6ZrSTS92PDMUlhbMfRx7g6y7IayOzrq",
	"riozQm+a1V1f5NoaR0pBu9Zb8pWZZRhGo7F9YNKw3IL+WspcjKNIn5jUeSrCOYluj6psG3lLNYUsa2sa",
	"R9W4g4RgkTOOD2yRElHrg2hI+acmCA3ifpsbjePNBKZS2RGZEInCIGm3nGcsvnlTuXOlmVZROCi+S8CG",
	"B7gVX13/REeDQisgS7uPJg0P5HlGYl2uR/Zc87c/hF6wQ8JdHh07or7QzW6zAiWResZPEP+jKmurKrYs",
	"XctDG84JGqOXB4eadjmW19pZ0YFy7Eh7NnJX99RcqyQgYk5yaTR+ZAmcKgGt0xxJThM0Rh9AfoEs+02p",
	"+Wi1KONEzqgwcXlhmjNOieN6SjtofO9cY6y3fxjP+OEGny/OTNsBT4VytGM0ulQPGm5oLCavH77A5MRI",
	"9DniS6UnbFyAffXbVos4CBaXP8SLzoRtN16Ul07GjSE63iCEug/tmfiU3uKMJMG/CuDz4Lx2oQZxvHEQ",
	"x73W133ZRYhebdwHr7p84GtU9pO53N5wIa+jjE0JtU2uNpPP9ONlFp8zId/m5D9Hbwt5bUW4af//wpL5",
	"xkzXdyGL5j4oeQGLFuvXi7Zn0/TYHXwq4hiESItsJ7wuL1QC7VIN4GjjAI76ANgrwYDx4NxeF+0XuzVD",
	"vLRmhezltXq+ithGZutUY4VscG21fVw3/cp6zmvhO1376xD2m3lhVe16CR9t1q/K8sB4IdmT5ft64wBe",
	"d1r+NuOAk3nw63cipNj7VRszmpKpiJZagwlkIKHN7vf65wEOPir54ELLL9PcCGmivzPqtbQV3u6ydoAF",
	"BkjyuJJI43b9R1Zkruf3tSgzdEeXi9B/gvgA0qW2CM6IkL7TxFB2r2f5oF6Au1TbjZm+sJTm7JKN+8kF",
	"fyq3GVptd3DXu+VVmd1Pic2n9wYJdpDl3cVu/fTYd9p95LaT6hO4jWYsvulsn3wAqjgNwe9KqmvTew+3",
	"5fPtMkxNkmCJAwvrQdls5TRvdfkfvAdKHhbFlTOsjlYCt8Gzqg0aMJrNn7djx6F8p9obvAv1NHiPJZ5g",
	"AX3R05Jbr8MMnuWT/KMMnrnKEVH9JlVXef2ZljI9JfWJ0XZiBbcbRovo0fZkdlZOq9NkZKK8t+V0yeye",
	"GurEz+eqXmqzeQu1UvUS4y4qpZOn9bOz9fMTLBwnT2SM3RR5dG9fOlh0JvszLRk8u4AZkxCdqezz3N9z",
	"tInfDPnsfoewztVX9SLEVm++yneQ/LGs4vi4Lrr2msflO40uixtvZ6y6sQ7M6xZ+ytob6xeH27yzHnRT",
	"/cLc2O+R5yvYDeerJCxWXk6cM9FzB3OudWwtFWtku0jEyq49u5j4QTn4I9O5IThj0ykkwSndMy4b1raJ",
	"HN2TZDHgOkJHdjIPTt/3HZw0r0+TtVMfSXxJ73gL5NzlfYU/x/3Vi0Tt9n1NrnZZ9NxV9DDfZtHN0n5z",
	"zqnzgCckj7TW+yno6OzSHHCsv3+K7Bd83Z0tJRFgf+3h7NIXVmX5Pd+221sa1tPh/GnfrYlesbqnr3XW",
	"w+aqkm5zeSsVtV57u6ioz57WztPa6V47TqKQZAYZodBz9yiDf1uhrlLGEVivlil/49CfrmcGvZ9hCpvV",
	"L2ZU1ux9mq8+SO0M3dss00dMETxLGQ8SmBTT551x1JI/5F0Z01BcHYsK//7318zXMbP+pfSu4Byo7G8J",
	"a4N/B7SDhq6Lzy32nxoi/WG3DZHOwGuz+g+EOuw/5EDY/Mxq+KvL+hedKeOfbhIe801CTfnIfg3bn4VO",
	"rFTA0gFb32lSDdhJd2SjGcya4rzi+cTtn4jbQ5i9Jq//Mqx+4vTPxunqHrKT0WdYqmO77k4PpbW9mVyf",
	"1OHPeUR0nfTE//3k/2LxvwAAAP//RM5mT1ZZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
