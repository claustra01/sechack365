// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Identifiers struct {
		Activitypub *struct {
			Host          *string `json:"host,omitempty"`
			LocalUsername *string `json:"local_username,omitempty"`
			PublicKey     *string `json:"public_key,omitempty"`
		} `json:"activitypub,omitempty"`
		Nostr *struct {
			PublicKey *string `json:"public_key,omitempty"`
		} `json:"nostr,omitempty"`
	} `json:"identifiers"`
	Profile   string    `json:"profile"`
	Protocol  string    `json:"protocol"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1f8CAAD//6Wi/+WHOwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
