// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
