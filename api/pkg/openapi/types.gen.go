// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	PublicKey string `json:"public_key"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	LikeCount int        `json:"like_count"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTXPbONL+Kyy+7yGppUw7cbYqOiWTjLOu8WS9znpzSLlcENmUMKYABgDtaF3671sA",
	"CBIUwQ95JEsZ+5IPs9F4uvsButEgfe9HdJ5RAkRwf3zvZ4ihOQhg6n84Vn8Sf+xnSMz8wCdoDv5YPgh8",
	"Bt9zzCD2x4LlEPg8msEcyRFikUkpLhgmU3+5DHyaJBxEqe17DmxRqSueOlRgImAKTOnIOTA9wImpfNyF",
	"DH6geZaCP/7mv5MD/ED//a54cBDRuVSZ5ZOjV6/RJPKvAoc5dzBJMJHAWixiwGnOooFgfBRFYuzAsTrz",
	"0gxX4UGRoApBxmgGTGBQP34XUSLgh/I2JfDPxB9/a8QkuPexgDl3hKucFjGGFv7yahn4OKJEiv4/g8Qf",
	"+/8XVrQJC0ShgjNSknJE7FSNyYT+cD4xoW08oLloG5MxSIAxiC8tbjSl8kmKo99gMcyCSly6O5/PEVt0",
	"uMlF9yrm36pwFAMCvXq0I0rrXLYUPqlAFHGwLaroSSd/QCQkLisQDXK0YA78nKX9thQGSNn2iWvurs/e",
	"Qgp6R/RSag/dOcz/RAxsx+vJVlQ7rclGOAYicILBscxmlAsnpJRGKL3O+xl5fQOLfuwr6gI9cU2HE30u",
	"Zk3QGeL8jjJ3GDogr2Cy0JQaXSCAMcpGx4eHTSRz4BxNob4P/oJi7wK+58BFc/cLfC6QyPl1ROP6uOPD",
	"w8CVMWzI9tignL0L9NFA0JdE+poy/F+I10N9tAXUxwNRf6bCO6E5WRPy8RYgvx0I+QMlSYqjNanxduOI",
	"3wzm8ykRcqGk3hdgt8C8X+X4deC/2Sizq+2MNw1AkcC3WCyyfNKbJ2s7o8zdlAvWN0oJ1QYuHRgJ3CU0",
	"TemdI3chNgVx7Uwiqxt+KXrlniPFN+DYHilv0V9lmiq6Z1JHMCz1GM0tcLIimdThqMqBiH5zjaBTO40B",
	"k4S6KCtQjATqD5zWMCoHyJydAbmAKeaCIYEpURpjSFCeCn+coJRDCWZCaQqI6IqNChrRVJcDpgItx9VY",
	"GPRVpoHPgd3iSJszyIRigBpLE3GHGAwfawaoXFks9kEjtfQy8G+BcazrssrmVweHvTRqutv2pWWMgWb5",
	"JqgiXSHoosrIZka7lPFls8wjE5VZXKNVvet+uGKy0WKN6QRtx7OOxxQ1lcs5RDMU3bz++xsXy5xROjw4",
	"GhCnoioa5OWSQ3W0srji61FrpMe4yjQ+AMOonHJlw6UCpS2n8doep+Tc86zs+c0td41SuKfk1ZMxSJHj",
	"6BExQALia6S204SyufyXHyMBI4Hn4OJB2xmWXwNBk9QulK0tLs/itWcadPpSxxcpaUMIbMtqk7tctG6e",
	"CTbpN5lzryOa12YqOfVAx3HoLTw4lglbkbzFp7oTZNxQQ7qef+2pGm6OMc9StLhuPRaaI7ujz6F3+g0e",
	"24zGoA6rAOGyzW3UQ/jR6whdAXZxRUsA65JpdWfbuq6Xx12UskWLZdWFJGM0wSk8ILYPXBLD+FCSv5cU",
	"xoCyA9W2KOperHlmJayNGLo4dwdpekPoHRm1l7EpJjf1crIrck2NI6mgWVyutmHULMMwao3NjpGCZZ8g",
	"ZkJkfByGqsczo1yEKMPh7VGZ3kNnbSiRpU1N47AcdxBjxDPK0IGpikJifBAOqTflBIFG3G1zrRW+mcCU",
	"KlsiE/g810iaTfQ5jW7ele7sNdMoCgbFdwXY8AA34qsKrvBoUGg5pEn7WajmgSxLcaTOB6E5SP3tD64W",
	"7JBwF2fVlqgvVfter0CBhZrxC0T/KOvosmwuauXilIgy7I/91weHinYZEjPlrPBAOnakPBvaq3uqL4pi",
	"4BHDmdAaP9MYTqWA0qnPQKexP/Y/gfgKafqbVPPZaJHG8YwSruPySjdsrDLH9pRy0PjeuphZb//QnnHD",
	"9S4vznSfA025dLRltH8lH9TcUFtMTj98hcmJluhyxNdST1C70vvmtq0SsRAsrx7Fi9aETTdeFNdo2o2B",
	"f7xBCFVv2jHxKblFKY69f+XAFt555UIF4njjII47ra96tcvAf7NxH7xp84GredlN5mJ7Q7mYhSmdYmK6",
	"ak0mn6nHqyw+p1y8z/B/jt7nYmZEmL4S+IXGi42Zru5HlvV9ULAclg3Wrxdtx6bpsNv7kkcRcJ7k6U54",
	"XVyyeMqlCsDRxgEcdQEwl5weZd65uULaL3YrhjhpTXPRyWv5vI/YWmbrVKO5qHGt3z6muoxFPee08IOq",
	"/VUIu828MKp2vYSPNutXabmnvRDvyfJ9u3EAb1stf58yQPHC+/UH5oLv/aqNKEnw1Nw/le3BGFIQ0GT3",
	"R/VzD3mfpbx3oeRXaa6FFNE/aPVK2ghvd1lbwDwNJH5aSaR24/6YFZnt+X0tyjTd/atl4D5BfAJhU5t7",
	"Z5gL12liKLvXs3xQL8Beqs3GTFdYCnN2ycb95II7lZsMLbc7uOvc8srM7qbE5tN7jQQ7yPL2Yjd+euo7",
	"7T5y20r1MdyGcxrdtLZPPgGRnAbvdynVtul9hNvi+XYZJieJkUCegfWgbNY7zXtV/nsfgeCHRbF3hv5o",
	"xXDrvSjboB4l6eJlM3YMirfEncG7kE+9j0igCeLQFT0lufU6TONZPck/yeDpqxweVq9utZXXl6SQ6Sip",
	"T7S2EyO43TAaRE+2J7OzclqeJkMd5b0tpwtmd9RQJ24+l/VSk81bqJXKtyZ3USmdPK+fna2fn2DhWHki",
	"pfQmz8J789LBsjXZnylJ78UFzKmA8Exmn5funqNJ/HrIpf1twjpXX+WLEFu9+SreQnLHsozj07ro2mse",
	"Fy9R2iyuvZ3Rd2Pt6dct3JQ1N9avDrd5Zz3opvqVvrHfI8+XsGvOl0mY915OnFPecQdzrnRsLRUrZLtI",
	"xNKuPbuYeKQc/Jmq3OCd0ekUYu+U7BmXNWubRA7vcbwccB2hIjtZeKcfuw5Oiten8dqpD8eupHe8BXLu",
	"8r7CneP+6kWicvu+JlezLDruKjqYb7LoZmm/OedUecARkida6/0UdLR2aQYoUh9cheaTwfbOlpTwkLv2",
	"sHbpC6Oy+IBw2+0tBev5cP6871ZEL1nd0dc662BzWUk3ubyVilqtvV1U1GfPa+d57bSvHStRCDyHFBPo",
	"uHsU3r+NUFspYwmsV8sUv0PpT9czg97P0IVN/4sZpTV7n+bLL2BbQ/c+TdURk3svEsq8GCb59GVrHJXk",
	"o7wroxuK/bEo8e9/f01/HTPvXkofcsaAiO6WsDL4d/B30NC18dnF/qO9qrbfDZHWsJuGSGvglVndB0IV",
	"9kc5ENY/sxr+6rL61W1L9Vumnm8Snu5NQkX50HwN252FToyUR5MBW99pXA7YSXdkUAarfZ/fn8iMRdab",
	"no9M8XMkZisM/8loNoRka1Lsr0awZ3o9hF7l7Vwruc6QkIdZ1bMdyjBzX7c+v4Kf8+BkO2lnHAyfU3nv",
	"Ilgu/xcAAP//fevbgUNZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
