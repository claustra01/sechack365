// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Identifiers struct {
		Activitypub *struct {
			Host          *string `json:"host,omitempty"`
			LocalUsername *string `json:"local_username,omitempty"`
			PublicKey     *string `json:"public_key,omitempty"`
		} `json:"activitypub,omitempty"`
		Nostr *struct {
			PublicKey *string `json:"public_key,omitempty"`
		} `json:"nostr,omitempty"`
	} `json:"identifiers"`
	Profile   string    `json:"profile"`
	Protocol  string    `json:"protocol"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/srq/WT1cvn/AAAA//9uMYpzIkcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
