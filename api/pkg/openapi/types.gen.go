// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"\@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Error      string `json:"error"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Error      string `json:"error"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Error      string `json:"error"`
	StatusCode int    `json:"status_code"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// User defines model for user.
type User struct {
	CreateAt       time.Time `json:"create_at"`
	DisplayName    string    `json:"display_name"`
	HashedPassword string    `json:"hashed_password"`
	Host           string    `json:"host"`
	Icon           string    `json:"icon"`
	Id             string    `json:"id"`
	Profile        string    `json:"profile"`
	Protocol       string    `json:"protocol"`
	UpdateAt       time.Time `json:"update_at"`
	Username       string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/bOBP+KwHf97ay5aTOHnTqLrAfQRfdRYtuD2kQ0NI4ZiORDEnFMQz99wVJiaIk",
	"ypZRp6deisacj2eemeEMtUcpKzijQJVEyR5xLHABCoT5i2TmX4oSxLHaoAhRXABK9EGEBDyVRECGEiVK",
	"iJBMN1BgraF2XEtJJQh9QFUVoVKCsLpBe+74kFV4wQXPtXjB0se3OUtxvmFSoSjgcAurNaEPIJzHpxLE",
	"rnUpQLJSpFNd4jRVyVG/VaNs6MOpYsY/F4yDUATMz1++vE0ZVfCi9F+Mwt9rlNwOWIv2iCgoZIBQ5xgL",
	"gXeouqsiRFJGtej/BaxRgv4Xt4mNa0yxATQzklojC5omdMVegidNAgcHrFRjOlzAGoSA7JNXAUOpcpWT",
	"9B3spkXQimvCy6LAYneAplBBtjm/9RNSq0S2wi0VLr5QNDUrLYw6E35Mdy5fbPUVUqWReakYFMgI6giV",
	"Ij8eTR2Alh133CG8632kLNiW2mYaT94/UHxDFnzirbOe6VA0IAQTs+ViMYzDHHWb+FecXXyApxJCzRsh",
	"qbAq5X3KMujoLRcLJ02oAn2r9NH7ujWsg4CXkwC/Z+rid1bS7DS4yzPDvZ7I7w1Vui3yi48gnkFc/GZE",
	"ToB+fUamKcuA0DUbIi9A4QwrfOyyaSzMnILuAw70AzwQqQRWhFFjMYM1LnOFkjXOJTgwK8ZywNTeg0yx",
	"lOW2xZp73enptiTPRO14uQoR1r3vIyRBPJPUhjMphFrB6LK12mIB03UbBTPI8cN0TStdRegZhCT2rmtj",
	"vpovgrPbz/aQbp9LL5gGmsdN1Ga6RXCoVGZ+ZYxLNVwOr066Ms0a0jYzJHzYC7mx4ukcBO3ns4unmbct",
	"5RLSDU4f3/x8HaqyYJYW88sJeaqn4CSWXQ110eolUJ5WWjOr0wdjfz2OYeZc9gYwU9iftGNXkZUL+dGG",
	"h3ZTAVjBPTaL35qJQv8PZVjBTBHD3yAlGZE8x7v70dVpg+UGsnuOpdwyEZ7dZlsN7nr1/jE8yEa2ObYm",
	"OYydma4Mby48OzXycnxh7DdMhiL/CVEv5w7QkKQer21gbntrU+WDD6V6C3n+SNmWzsYnTk7oY/fmP1Tj",
	"Q4szbWA4B3o8WC/TMFqLA6AbA8tv/41SXCZx7J49MeYkfr50nRgHr3GNLB9aSmKnN88IlpwJPG8usJg2",
	"HMRTRoN2EFnEh2PuvAXPkxhnciQz+j1gkfSm/JRXZG/fqQ1Fk/LbAzY9wYP8mrsxvpyUWgn5enxt6TDA",
	"eU5SM8rjZuf56as0PTcl3fUrYSTrlXm/2g5URJml9COkf7qR5yZcPdbqhQ5zghL0Zr4wZcex2hiy4rkm",
	"dmaYjf3ufgD7dudgt5KbDCXoD1CfIc/faen3jbCOQXJGpaX/ym7S5rlJjQ2fEMNDsvc+QJx2TWgCKkNC",
	"B3mn/o9C/+yko87noNswmlbE81PdfZe4PYcm6uUZvbQvy8b28uy2l7Xt67Pjvq5x22KoOzpn7LHk8b4Z",
	"ldWheviFk38v/zIa3seO0wrCzeRXrQeza/0ogAkF0BnZx3LfXGFXi9e8xAJXlz9/jqL8ZKS+EeCk4W/L",
	"bLCCfcf02Ym8J1k1jZab7OSOJdmpvdod4pPDtN/GdXQ/Gv+1Kqeq/gsAAP//hbLXwN8ZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
