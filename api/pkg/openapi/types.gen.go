// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId   string `json:"post_id"`
	Reaction string `json:"reaction"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Identifiers struct {
		Activitypub *struct {
			Host          *string `json:"host,omitempty"`
			LocalUsername *string `json:"local_username,omitempty"`
			PublicKey     *string `json:"public_key,omitempty"`
		} `json:"activitypub,omitempty"`
		Nostr *struct {
			PublicKey *string `json:"public_key,omitempty"`
		} `json:"nostr,omitempty"`
	} `json:"identifiers"`
	Profile   string    `json:"profile"`
	Protocol  string    `json:"protocol"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
