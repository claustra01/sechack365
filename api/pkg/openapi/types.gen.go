// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//ztQ3/cRXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
