// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *struct {
		Host          *string `json:"host,omitempty"`
		LocalUsername *string `json:"local_username,omitempty"`
		PublicKey     *string `json:"public_key,omitempty"`
	} `json:"activitypub,omitempty"`
	Nostr *struct {
		PublicKey *string `json:"public_key,omitempty"`
	} `json:"nostr,omitempty"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId   string `json:"post_id"`
	Reaction string `json:"reaction"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	LikeCount *int      `json:"like_count,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	User      PostUser  `json:"user"`
}

// PostUser defines model for post-user.
type PostUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ix34v5/8Xyz+HwAA//9wvuNhzk8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
