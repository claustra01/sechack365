// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	PublicKey string `json:"public_key"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTXPbONL+Kyy87yGppUw7cbYqOsWTjLOu8WS9zmZzSLlcENmUMKYIBgDtaF3671sA",
	"CBIUwQ95JEsZ+5IPs9F4uvsButEgfY9COs9oCqngaHyPMszwHAQw9T8SqT9TNEYZFjPkoxTPAY3lAx8x",
	"+J4TBhEaC5aDj3g4gzmWI8Qik1JcMJJO0XLpIxrHHESp7XsObFGpK546VJBUwBSY0pFzYHqAE1P5uAsZ",
	"/MDzLAE0/obeyQHI13+/Kx4chHQuVWb55OjVazwJ0ZXvMOcOJjFJJbAWixhwmrNwIBiEw1CMHThWZ16a",
	"4So8OBRUIcgYzYAJAurH70KaCvihvE1T+GeMxt8aMfHvEREw545wldNixvACLa+WPiIhTaXo/zOI0Rj9",
	"X1DRJigQBQrOSEnKEZFTNUkn9IfziQlt4wHNRduYjEEMjEH0xeJGUyqfJCT8DRbDLKjEpbvz+RyzRYeb",
	"XHSvYv6tCkcxwNerRzuitM5lS+GTCkQRB9uiip508geEQuKyAtEgRwtmH+Us6belMEDKtk9cc3d99hZS",
	"0LtUL6X20F3A/E/EwHa8nmxFtdOabEQiSAWJCTiW2Yxy4YSU0BAn13k/I69vYNGPfUWdryeu6XCiz8Ws",
	"CTrDnN9R5g5DB+QVTBaaUqMLBDBG2ej48LCJZA6c4ynU98FfcORdwvccuGjufj7iAoucX4c0qo87Pjz0",
	"XRnDhmyP9cvZu0AfDQT9JZW+poz8F6L1UB9tAfXxQNSfqPBOaZ6uCfl4C5DfDoT8nqZxQsI1qfF244jf",
	"DObzWSrkQkm8z8BugXm/yvHrwH+zUWZX2xlvGoBDQW6JWGT5pDdP1nZGmbspF6xvlBKqDVw6MKZwN2Ig",
	"wbjSV0a5uG7JImulAqPoyg0hpklC7xzpE7MptCBYnagUbZkjKxJIfQZVLaSiX78RdGqnEZA0pi6aChxh",
	"gfuDpTWMygEyT2eQXsKUcMGwjI/SGEGM80SgcYwTDiWYCaUJ4FRXaVTQkCa6BDBVZzmuxjy/rxr1EQd2",
	"S0JtziATigFqLI3FHWYwfKwZoPJjscAHjdTSSx/dAuMFmSubXx0cIr8nwk132760jDHQLN/4VaQrBF1U",
	"GdnMaJcyvmyWdulEZRPXaFXjuh+umGy0WGM6QdvxrOMxhUzlcg7hDIc3r//+xsUyZ5QOD44GxKmohAZ5",
	"ueRQHa0sqPh61BrpMa7SjA/AMCqnXNnhqMBJywm8tr0pOfc8K/t8cxdfo/ztKXP1ZAwS7DhuhAywgOga",
	"q+00pmwu/4UiLGAkiApa84Dacm7l15DiSWJnGGuLy7No7ZkGnbjUkUVK2hB827La5C4XrZtn/E367UGO",
	"4dBbTHAiCyRF4haf6e6OMXM9l9naG56LCM8SvLhuPd2Zk7ejXaE37w2evoxGvw6rAOGyzW3UQ0Le6whd",
	"RV2HNK8RrdxSjASwLplWd7Yt1XqV28UiW7RYKV1IMkZjksADYvvAVTCMDyXfe0lhDCgbSW2Lou7FmmdW",
	"wtqIoYtzd5AkNym9S0ftlWlC0pt6hdgVuabGkVTQrBdXuylqlmEYtcZm40fBso95MyEyPg4C1aqZUS4C",
	"nJHg9qjM2IGz3JPIkqamcVCOO4gI5hll+MAUOkFqfBAMKSHlBL5G3G1zraO9mcCUKlsi4yOeayTNXvic",
	"hjfvSnf2mmkU+YPiuwJseIAb8VU1VHA0KLQckrj9eFPzQJYlJFQlf2DORn/7g6sFOyTcxRG3JepL1YXX",
	"K1AQoWb8DOE/ytK4rISL8rc4+OGMoDF6fXCoaJdhMVPOCg6kY0fKs4G9uqf6vicCHjKS6eM8+kQjOJMC",
	"Sqc+1pxFaIw+gvgKSfKbVPPJaJHG8YymXMflle67WJWL7SnloPG9db+y3v6hPeOG6325PNftCjzl0tGW",
	"0ehKPqi5obaYnH74CpNTLdHliK+lHr92M/fNbVslYiFYXj2KF60Jm268LG7DtBt9dLxBCFWL2THxWXqL",
	"ExJ5/8qBLbyLyoUKxPHGQRx3Wl+1XJc+erNxH7xp84GrB9lN5mJ7w7mYBQmdktT03ppMPlePV1l8Qbk4",
	"ych/jk5yMTMiTHf2f6HRYmOmq2uOZX0fFCyHZYP160XbsWk67PY+52EInMd5shNeF3clnnKpAnC0cQBH",
	"XQDMXaVHmXdhboL2i92KIU5a01x08lo+7yO2ltk61Wgualzrt4+pxmFRzzktfK9qfxXCbjMvjapdL+Gj",
	"zfpVWu5pL0R7snzfbhzA21bLTxIGOFp4v/4gXPC9X7UhTWMyNddIZccvggQENNn9Qf3cw94nKe9dKvlV",
	"mmshRfT3Wr2SNsLbXdYWME8DiZ5WEqldnD9mRWZ7fl+LMk13dLX03SeIjyBsanPvnHDhOk0MZfd6lg/q",
	"BdhLtdmY6QpLYc4u2bifXHCncpOh5XYHd51bXpnZ3ZTYfHqvkWAHWd5e7MZPT32n3UduW6k+gttgTsOb",
	"1vbJR0glp8H7XUq1bXof4LZ4vl2GyUkiLLBnYD0om/VOc6LKf+8DpORhUeydoT9aEdx6L8o2qEfTZPGy",
	"GTsGxcvezuBdyqfeByzwBHPoip6S3HodpvGsnuSfZPD0VQ4Pqtef2srrL2kh01FSn2ptp0Zwu2E0iJ5s",
	"T2Zn5bQ8TQY6yntbThfM7qihTt18LuulJpu3UCuVbx7uolI6fV4/O1s/P8HCsfJEQulNngX35qWDZWuy",
	"P1eS3otLmFMBwbnMPi/dPUeT+PWQL/YnButcfZUvQmz15qt48cgdyzKOT+uia695XLwXabO49nZG3421",
	"p1+3cFPW3Fi/OtzmnfWgm+pX+sZ+jzxfwq45XyZh3ns5cUF5xx3MhdKxtVSskO0iEUu79uxi4pFy8Ceq",
	"coN3TqdTiLyzdM+4rFnbJHJwT6LlgOsIFdnJwjv70HVwUrw+i9ZOfSRyJb3jLZBzl/cV7hz3Vy8Sldv3",
	"NbmaZdFxV9HBfJNFN0v7zTmnygOOkDzRWu+noKO1S5tPCnnXJi0PKbfgXRaynqDuAsTaqi9LvdtvUxao",
	"NMrnu+JnoqOK1e19rZMo6md0WVLX+byVsrr6vHcXtXXpiuc21/NKcq8kK20IMoeEpNBxEym8fxuhtsLG",
	"Elivsil+MdKfrm4Gva2hy5z+1zRKa/Y+6ZefuLaG7iRJ1IGTey9iyrwIJvn0ZWscleSjvDmj24v9sSjx",
	"73+3TX8rM+9eSu9zxiAV3Q1iZfDvgHbQ3rXx2aX/o724tt/tkdawm/ZIa+CVWd3HQxX2Rzke1j+6Gv4i",
	"s/p9bEv1q6Oe7xWe7r1CRfnAfBvbnYVOjZRH4wFb31lUDthJr2RQBqt9oN+fyIxF1nufj0zxCyxmKwz/",
	"yWg2hGRrUuyvRrBnej2EXuVdXSu5zrGQh1nVwR3KMHN7tz6//J/z4GQ7aWccDJ5Tee8iWC7/FwAA//97",
	"lGiDGFkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
