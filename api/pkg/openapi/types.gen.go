// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *struct {
		Host          *string `json:"host,omitempty"`
		LocalUsername *string `json:"local_username,omitempty"`
		PublicKey     *string `json:"public_key,omitempty"`
	} `json:"activitypub,omitempty"`
	Nostr *struct {
		PublicKey *string `json:"public_key,omitempty"`
	} `json:"nostr,omitempty"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId   string `json:"post_id"`
	Reaction string `json:"reaction"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      PostUser  `json:"user"`
}

// PostUser defines model for post-user.
type PostUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow-count"`
	FollowerCount int         `json:"follower-count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post-count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcUXPbuBH+Kxy0D8mUMq3E7oOekjvXV8/pUtepm4eMxwORKwlnimAAUI7q0X/vACBI",
	"UAQpKidZ8lkvdz4TWHy73wfsYknfEwrpLKUJJIKjwRNKMcMzEMDUf5FI/TNBA5RiMUU+SvAM0EA+8BGD",
	"bxlhEKGBYBn4iIdTmGE5QyxSOYoLRpIJWi59lHFgeq7TXvG4zSp8x7M0BjT4ij7ICcjX//6QPzgJ6Uya",
	"TLNR/917PArRne+A8gijMUkmwAos3zJgixIMA04zFnYEg3AYioEDx+rKSzNdhRaHgioEKaMpMEFA/fpD",
	"SBMB34X8mSbwrzEafK3F039CRMCMO0JdLIsZwwu0vFv6iIQ0kUP/ymCMBugvQUl5kCMKFJyeGilnRE7T",
	"JBnR784nhtraA5qJpjkpgzEwBtGtpY36qGwUk/BXWHTzoBwuw53NZpgtWsLkkmrJ+deSjnyCr5WvA1F4",
	"5/Ilj0kJIufB9qiUJx39DqGQuCwiauJowOyjjMXrfckdkGObF66Eu7p6gyjoY6K3UjN11zD7AxzYgdeL",
	"rZh2epOJad2FFHP+SJnbkaxZhiuIrNOqsOgCAYxR1js7Pa0jmQHneALVk+QnHHk38C0DLurnh4+4wCLj",
	"9yGNqvPOTk+L0SQRII+2Vcj2XL9YvQ10vyPo20TGmjLyP4g2Q93fAeqzjqg/UeFd0izZEPLZ1iGfd1bH",
	"VSKk7GLvM7A5MO8fcv4m8M+3qpMxjWP6WMceMsAConusctiYspn8CUVYQE8QtWlqiLUtYPdNicf9a4HZ",
	"BETTpCyNNgSyEgt14tjQ7BV929HKYq5gkQgSQcYkr6uqEcOhIHMiFmk2qj+cUi6c7sU0xPF9tj533j/A",
	"wn2m1WAmlAtHUbKhHadleIzJAzhsU97IIAMZGp0Jy30wlHbWcVdM9YsV7tyw0jzAKyqWeT8R63OBGei0",
	"TiMgyZi6NrjAERZ4XVFjLPSKCTLjppDcwIRwwbD0UVmMYIyzWKDBGMccCjAjSmPAia63qKAhjXUyN/Vj",
	"Ma8iQ39dXekjDmxOQu1OJxfyCWouHYtHzKD7XDNB5en8aOw0U49e+mgOjOdaKn1+d3K6Vkr1cNuxtJwx",
	"0KzY+CXTJYI2qfRsZTSPMrGsF2nJSGU112xVrbofrp58uRVrTitom88qHnM2lSHnEE5x+PD+7+culTlZ",
	"Oj3pd+Apr8g6RbnQUBWtPE35ZtLq6TmuEpF3wNArllwp9anAdk3flK/1ONc6m55r/g9l7q3lXl1/r4u9",
	"dEqFzJ2s866AcXKzHF3arkUtIjyN8eK+MdOa+1q7Qitm8kkuJG4QP0LPWuC6vOmFNKuIopBbWQC1jWlw",
	"v7mRUC2H2hi3hxqSWpCkjI5J3FAO5Yf2VhXb7cZYqNNcGw0Uf1UUxoGiXdAk4WoUK5FZobXGoUtzjxDH",
	"Dwl9THrNVUtMkodq9dDGXN1iTxqo1xIrsdKrdMOoLdaLZgXLLhqnQqR8EASqapY1dYBTEsz7xWkeOEsB",
	"iSyuWxoExbyTiGCeUoZPTBIMEhODoEt5IRfwNeJ2nyt9y+0QU5hsYMZHPNNI6h3PGQ0fPhThXOumMeR3",
	"4ncFWHeCa/yq/Br0O1HLIR43l76VCKRpTEJVDgambv7b71xt2C505z2tBtaXqteqd6AgQq34GcJ/FmVT",
	"USXlpVF+KcApQQP0/uRUyS7FYqqCFZzIwPZUZAN7d09A6EKLh4yk+qaFPtEIruQAZVOXvFcRGqBfQHyB",
	"OP5VmvlkrEjneEoTrnl5p7sZVpVhR0oFaPBkddE3Oz90ZNxwvdubob564gmXgbacRnfyQSUMlc3kjMMX",
	"GF3qEW2B+FLY8SvvTr66fSuHWAiWd88SRWvBehhv8nceOow+OtsihLIN6lj4KpnjmETevzNgC++6DKEC",
	"cbZ1EGet3pdtwaWPzrceg/OmGLg6e+1izo83nIlpENMJSUwzpa7koXq8quJrysXHlPy3/zETUzOE6e7z",
	"TzRabM111YpfVs9BwTJY1lS/GduOQ9Pht/c5C0PgfJzFe9F13s/3VEgVgP7WAfTbAJg3Uh5l3rV5W3FY",
	"6lYKccqaZqJV1/L5OmHrMTuXGs3EvrT2iSqWvSGdTCDyrpKXwS9TTbW8nnUy/LO6+yjn2mm+Mab2fYT1",
	"t6srRauOQnQQx9dBqyqCeSCvJY013S+QSAmB95sc5ajrlKAuYJ4/3y25cpEIC+wZWNGPFD1rl/moziTv",
	"AhICP3Tyr11hPVcRzL03xd3Mo0m8eFvnjgHXrDnJu5FPvQss8AhzaGNPjdz5ma/xrB75r5I83V/iQflO",
	"OIIYBNRJvE3yMav0XagJisFLbe3SDNwtjQbRqy0UKx9wPOetSya3QLN8sBevXNnoznqjUrVx6dZzUZ7U",
	"1bz9+iTfU/uoUC6Pm2dvm+cF7BorScSUPmRp8GRegywbM/1QjfTe3MCMCgiGMvW8dd8CTNbXU27tD/M2",
	"acYVr2Z22ovLX1y6uSx4fF2tt4PWcf4W31Zx5X3Ruh66p18AuSVreujvTnfZRe/UO5cwbb+LSRXXZf7j",
	"ay/r1/ptUEM2vFY2dpMFzcdc+0iD0q+Duqg/WwY89OaTVm1dyMETiZZtVxV9I1F69kYL7+qi7c6idH0V",
	"bZx4SORKOWc7EKcGe0gZ5s9eoqmwH2pqM9vCb+qUiTblmxy2XdlvLzhlHnBQ8korrRchR+uUNp9w88B8",
	"Od7cVJIjPOyuPaxT+saYzL8h33VnScE6Xo2P524p9ELVLS2lYYuai0q6ruWdVNRq7+2joh4e985x7zTv",
	"HStRCDKDmCTQ8tpPeP8xg5pKGWvAHypLOn2CqeuT2oewtZgUoA4+Wxd/x9DIwMc4VjdF7r0ZU+ZFMMom",
	"bxvpUCOfhQvdlVvPRYH/8JtU+qPXWfuO+DljDBLR3ldVDv8GaA9dURufXbMf+xrttJu+RiPxyq32e52i",
	"/VnuddWvp7t/kaP+9xnS+WM7/jW340vJB+aPXNqz0KUZ5dFxh6PvKiom7KXJsdUMZlzxhkSXH0dtvyht",
	"d1H2hrr+06j6qOmXpunidWKjoodYyNu3ajJ3lbV5wXigou568bNdP6r6MFW9XP4/AAD//71fQ6Y+TwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
