// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Text string `json:"text"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Host        string    `json:"host"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Profile     string    `json:"profile"`
	Protocol    string    `json:"protocol"`
	UpdatedAt   time.Time `json:"updated_at"`
	Username    string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
