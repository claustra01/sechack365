// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownNostrJsonParams defines parameters for GetWellKnownNostrJson.
type GetWellKnownNostrJsonParams struct {
	Name string `form:"name" json:"name"`
}

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//7M4aIpDYgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
