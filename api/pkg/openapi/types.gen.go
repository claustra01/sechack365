// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// User defines model for user.
type User struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Icon        string    `json:"icon"`
	Id          string    `json:"id"`
	Identifiers struct {
		Activitypub *struct {
			Host          *string `json:"host,omitempty"`
			LocalUsername *string `json:"local_username,omitempty"`
			PublicKey     *string `json:"public_key,omitempty"`
		} `json:"activitypub,omitempty"`
		Nostr *struct {
			PublicKey *string `json:"public_key,omitempty"`
		} `json:"nostr,omitempty"`
	} `json:"identifiers"`
	Profile   string    `json:"profile"`
	Protocol  string    `json:"protocol"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX3PbuBH/Khy0D8mUMq1E7oOekrvUqedy14yvbh4yHg9ELiWcSYABQDuqR9+9A4Cg",
	"SBH8o+pPEp9ezj5rd7H72x93F0vlCYUszRgFKgWaPqEMc5yCBK7/j0T6vxRNUYblAvmI4hTQVH3gIw5f",
	"csIhQlPJc/CRCBeQYqUhl5mSEpITOkerlY9yAdzoOu2VH3dZha84zRJA08/ojVJAvvn5pvjgLGSpMpnl",
	"s/Gr13gWolvf4cojzGJC58BLX77kwJdrZzgIlvNwoDMIh6GcOvzYPHll1TW0OJRMe5BxlgGXBPSf34SM",
	"Svgq1e+Mwr9iNP3cwNN/QkRCKhxQl8dizvESrW5XPiIho0r0rxxiNEV/CdYpDwqPAu3OSEsqjchpmtAZ",
	"++r8xKa28QHLZZtOxiEGziG6qXCjKZXPEhL+AsthEazFFdx5mmK+7IDJRdV1zj+v01Eo+Ib5BogyOlcs",
	"BSZrJ4o8VCNa05PN/oBQKr8qiWiQo8VnH+U86Y+lCEDJth9cg7t+egsp2CM1j1J76j5CukMOqsCbwzZM",
	"O6PJ5aIZQoaFeGTcHUjeTsMNjyrVqrTocgI4Z3w0OT9vepKCEHgO9UryE468a/iSg5DN+uEjIbHMxV3I",
	"orre5Py8lCZUgiptmy5Xdf3y9C6nxwOdvqEKa8bJfyHazuvxAbyeDPT6Nya9S5bTLV2e7N3li8HsuKJS",
	"0S7xfgf+ANz7h9Lfxv2LvfIkZknCHpu+hxywhOgO6x4WM56q31CEJYwk0Q9Nw2NjC/hdW+Nx/1liPgfZ",
	"ppRn0ZaObGChK07VteqJfjXQ2mEusCg8ZkxIB1qqv1DZX3OsoNM6i4DQmLmIJHGEJe5rntbCqFRQlT0D",
	"eg1zIiTHkjCqLUYQ4zyRaBrjREDpzIyxBDA1fZ1JFrLENA07p5R6qtGQByKXWT5zcaE+v/hIAH8goQln",
	"UAiFgtZlsXzEHIbrWgXdD4pHcJCmkV756AG4IKZ7r2N+dXbeS7cm3FUsK8FY1yrY+OtMrz3oosqoyox2",
	"KYtlcxigM109Xdp6KnJ/uPmEFVYqOp1OV/NZ98c27jXkAsIFDu9f//3CxTJnls7PxgPyVHT+QSiXHKp7",
	"qwYIsR21RkbHNYqIAT6MyiM3RkomcXV2bOsLRs51zrZ1zf+/OsTearyZ8/qw1zLOflBcPG1827UBe/Tu",
	"HTMiIkvw8q713mRvEEORJBFQSWLiZEm1ZDc+XBQEaJhMWIiTu7z/dnd3D0t3B3SwWkgHhFvacVnOOItJ",
	"0uJmUYb3ysFhd42SdPbCYV3Z4MA6gPKi2cbMerJdPH2EJLmn7JGO2keLhND7eovveqCaFkfKQLPhb4Rv",
	"Thnmo7HY5Kd2qzpJL6TMxDQINEEVfQOckeBhXJbcwNmvlWdJ09I0KPXOIoJFxjg+s50qoBaDYMgMoA7w",
	"jcfdMdeWWPtJTGmyJTM+ErnxpLn+Sll4/6aEszdMa8gflN8Nx4YnuJFf3QSD8aDUCkji9vm0hkCWJSTU",
	"M1tgK+Xf/hD6GRyS7mLB0ZL1lV68mSdQEqlP/B3Cf5azTTnKFPNLMbnjjKApen12rmmXYbnQYAVnCtiR",
	"RjaoPt1zMEvHDMz4eRWhKXoP8hMkyS9K+jcrrGIQGaPCwP/K3GArHb8KiMZh+lTZnG5XJhQAq+ouDyk/",
	"rowfEs+FwrESE7pV0rUoa89Kb5ifSmm/tg3/7PZ8LVI5Z3V7FIwqB2qMJns8Zb27srYne7c9KWxf7N3v",
	"i8LvGnE+wezSZradOUWpwLlcBAmbE7OHLWacOm0+MiHfZuQ/47e5XHzQsub5BiF/YtFyb0HpbeaqXj0k",
	"z2F1QJoVI/DheTXeu+3x8+GsZZXlq2aCk6gsl8OZqoR35E6jTZ0K0IBkGuB7ssn1FqiY7frzeW3Fv3Xx",
	"GX/XBDpSkn/Wty7vRtT6TDPTETwEamzuGkp0it/Bw69K7iDP62RnGxc7+1GD7z1QBQJ4RcwWwAgevBfl",
	"QO8xmixfNgHlIAyUfYhea8E/B6Q6Vu8dlniGBWyFqXn7IYL1y54IEpDQxPad/ruG99IomR9NjCffeZs5",
	"zSMd1e2GxjatlkUFR9BtZRnc0q2azNh/uyr8G9SwTlT8gal42U7ESgVLGLvPs+DJrlBXvd3hg9a4qX7H",
	"Y5stQLmrPegS4Gi3s2cwdKt0ei+uIWUSgg+q3b3cHM+K12hV4tR2wX2csbuxV+eH3I7178S8YslchFUq",
	"1CJTRVoMuFt81HKHqdL2CxEHuFd0HWvPPFXub/lIFlekj8WrgoKshpZNpgZPJOqv2pqsV9HW5ZpEhy3U",
	"R2PcD8+K9yA1JbzZ0rt6100MSVJICIVeWvzbCu6Y4kHv0kyuG280T7kflPtKqjoyX36PpTPtN1rqGDk3",
	"g5gz50fE7m2S6JFGeC9ixr0IZvn8Zfd8Y96FpjAMy18Bnd41PPO2rIj0c845UDlgPjb8GdSbNYOO0pvr",
	"r9+Hr7j1P8ZR0Z1uZMfhmaJEo9F3siyw38QWQ/l2WSp8i6Fw1+5xIlEvicoEeyzeqmLZvfZ2TDrx6Fnz",
	"aHsWlYuUIRyy25TvlEGnu8suDPqAJQhzfe2k0Wr1vwAAAP//ZSZh53E9AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
