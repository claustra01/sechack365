// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsFollowJSONRequestBody defines body for DeleteApiV1FollowsFollow for application/json ContentType.
type DeleteApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cvm/AAAA///NiPheJF0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
