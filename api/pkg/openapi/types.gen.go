// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context *Actor_Context `json:"\@context,omitempty"`
	Icon    *struct {
		Type *string `json:"type,omitempty"`
		Url  *string `json:"url,omitempty"`
	} `json:"icon,omitempty"`
	Id                *string `json:"id,omitempty"`
	Inbox             *string `json:"inbox,omitempty"`
	Name              *string `json:"name,omitempty"`
	Outbox            *string `json:"outbox,omitempty"`
	PrefferedUsername *string `json:"prefferedUsername,omitempty"`
	PublicKey         *struct {
		Id           *string `json:"id,omitempty"`
		Owner        *string `json:"owner,omitempty"`
		PublicKeyPem *string `json:"publicKeyPem,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"publicKey,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// Error400 defines model for error-400.
type Error400 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          *map[string]interface{} `json:"metadata,omitempty"`
	OpenRegistrations *bool                   `json:"openRegistrations,omitempty"`
	Protocols         *[]string               `json:"protocols,omitempty"`
	Services          *struct {
		Inbound  *map[string]interface{} `json:"inbound,omitempty"`
		Outbound *map[string]interface{} `json:"outbound,omitempty"`
	} `json:"services,omitempty"`
	Software *struct {
		Name    *string `json:"name,omitempty"`
		Version *string `json:"version,omitempty"`
	} `json:"software,omitempty"`
	Usage *struct {
		Users *struct {
			Total *int `json:"total,omitempty"`
		} `json:"users,omitempty"`
	} `json:"usage,omitempty"`
	Version *string `json:"version,omitempty"`
}

// User defines model for user.
type User struct {
	CreateAt       *time.Time `json:"create_at,omitempty"`
	DisplayName    *string    `json:"display_name,omitempty"`
	HashedPassword *string    `json:"hashed_password,omitempty"`
	Host           *string    `json:"host,omitempty"`
	Icon           *string    `json:"icon,omitempty"`
	Id             *string    `json:"id,omitempty"`
	Profile        *string    `json:"profile,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	UpdateAt       *time.Time `json:"update_at,omitempty"`
	Username       *string    `json:"username,omitempty"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links *[]struct {
		Href *string `json:"href,omitempty"`
		Rel  *string `json:"rel,omitempty"`
	} `json:"links,omitempty"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links *[]struct {
		Href *string `json:"href,omitempty"`
		Rel  *string `json:"rel,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"links,omitempty"`
	Subject *string `json:"subject,omitempty"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTY/bNhD9Kwu2t2otb2L3oFNaoB+LFGmRYJtDEixoamQzpjhccmSvYei/F6Is2Ypo",
	"W252c0oOQWwOOY/DN++Ns2UCc4MaNDmWbJnhludAYP0nmfq/NUuY4bRgEdM8B5ZUCxGz8FBICylLyBYQ",
	"MScWkPNqB21MFeXISj1nZRmxwoGt9wbPa5dPnQqPPDeqCs9RLF8pFFwt0BGLAgnXMMuknoNtMz4UYDf7",
	"lBYcFlYMTcmFoORs3rLZ7MvHBaHPbywasCTBf/3x4yuBmuCRqk+o4e+MJR96VYu2TBLkLlDQNjG3lm9Y",
	"+amMmBSo+7nquMABhVXhl9p9g7PPIKiKrEnQO0DqGT4GV5p37i1gQcf2GAtZBhbSuwOi9KOKmZLiNWz6",
	"Fz2CEte6psDxs/6B/ESJB5XIFXnO7eZrjwFr0V5PxuP+9fxSl5G/8vTqLTwUEGJixBxxKty9wBQ6+ybj",
	"cRstNUHVIifRTAaheYN09TsWOr0My+QSLNOBlbnVVJFIXb0DuwJ79ZsPuQDXdGiNNKYgdYZ9WDkQTzkd",
	"yuF+GxrQb2EuHVlOErXfkULGC0Usybhy0CabISrgum4SJBSoasI32tDuq/RGriRtTDEL3barGRFzYFdS",
	"1HC/aCY9808ZxF41cXgx2BqY0Zpb6CdpunyP34FYcLF8+fM0BH8F1sla4/ZbxqOb0ThoAD0khePzAIzK",
	"egIlICR+qJAnaBBKFgT7YjhUCPiGsMAJ7rm3jQxtXv2LpZzgmqT3zl7NUumM4pv7o4q64G4B6b3hzq3R",
	"hjXUe13QAnaW019Ij4g8ZlLBsTXP7bBZmfTSmxfHfSRU8TUotdS41tfHW1pJvey2Xnd9YSHrPviCyLgk",
	"jtuRIeZGxqubuEkSBylRTSSqf1ISt/tGqeTOoOWjpr9i7eJ69IgH06wrCKfL0pmnnqguvbL4XoxvBlXE",
	"gcqOq1xHFo1RUnihjRuJ/OmzQ/1/qlSZfb30hfQOGQ/70uEHqZpsJMm71zsQf7Yq2OrITul25sGNZAl7",
	"ORr7p65maV/peFQ92LV/sfiQyHOoZ00DteHcpixhfwC9B6VeV9FvmuCq0s6gdvXbvagt18+r2p9xWE1f",
	"xGR7MDD/6N+a/RDvf1bsaOniQI+V9Z+oi7zDtbPQ37fRUefny4cwmn3IQZ7y0ze590FCf+vJE2bZD4/N",
	"2ZMnP3uyO3v65LinO9w1GXZyoBCXhYm3jZaXp/jwi5H/3vzld9ztf01eRojWNJ6VD97dvxNgAAE6Nnnu",
	"7RsJezF+ThELSNeheZ1FeeejvhJga7TnadZz+W/4fLWdb2VaDivLbXpxx8r00l7tTgCDr1n/X051u++N",
	"/1zMKcv/AgAA//+j6nhsjxQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
