// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
