// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTXPbONL+Kyy87yGppUw7cbYqOsWTjLOu8WS9zmZzSLlcENmUMKYIBgDtaF3671sA",
	"CBIUwQ95JEsZ+7IfYaPxdPcDdKMB+R6FdJ7RFFLB0fgeZZjhOQhg6v+RSP1nisYow2KGfJTiOaCx/OAj",
	"Bt9zwiBCY8Fy8BEPZzDHcoRYZFKKC0bSKVoufUTjmIMotX3PgS0qdcVXhwqSCpgCUzpyDkwPcGIqP3ch",
	"gx94niWAxt/QOzkA+fq/3xUfDkI6lyqzfHL06jWehOjKd5hzB5OYpBJYi0UMOM1ZOBAMwmEoxg4cqzMv",
	"zXAVHhwKqhBkjGbABAH1z+9Cmgr4obxNU/hnjMbfGjHx7xERMOeOcJXTYsbwAi2vlj4iIU2l6P8ziNEY",
	"/V9Q0SYoEAUKzkhJyhGRUzVJJ/SH84sJbeMDzUXbmIxBDIxB9MXiRlMqnyQk/A0WwyyoxKW78/kcs0WH",
	"m1x0r2L+rQpHMcDXq0c7orTOZUvhkwpEEQfbooqedPIHhELisgLRIEcLZh/lLOm3pTBAyrZPXHN3ffYW",
	"UtC7VC+l9tBdwPxPxMB2vJ5sRbXTmmxEIkgFiQk4ltmMcuGElNAQJ9d5PyOvb2DRj31Fna8nrulwos/F",
	"rAk6w5zfUeYOQwfkFUwWmlKjCwQwRtno+PCwiWQOnOMp1PfBX3DkXcL3HLho7n4+4gKLnF+HNKqPOz48",
	"9F0Zw4Zsj/XL2btAHw0E/SWVvqaM/Bei9VAfbQH18UDUn6jwTmmergn5eAuQ3w6E/J6mcULCNanxduOI",
	"3wzm81kq5EJJvM/AboF5v8rx68B/s1FmxyreDejlPxcDJpQmgNPGRFrOpbjaJ3lTPQ4FuSVikeWT3gRc",
	"23JlUUC5YH2jlFBt4NKBMYW7EQMJxpUXM8rFdUt6WivHGEVXbggxTRJ658jLmE2hBcHqRKVoyxxZkZnq",
	"M6gyJBX9+o2gUzuNgKQxdfFf4AgL3B8srWFUDpAFQAbpJUwJFwzL+CiNEcQ4TwQaxzjh4DfYKUsmKmhI",
	"E11bmHK2HFdjnt9X5vqIA7sloTZnkAnFADWWxuIOMxg+1gxQibfYOQaN1NJLH90C4wWZK5tfHRwivyfC",
	"TXfbvrSMMdAs3/hVpCsEXVQZ2cxolzK+bNaM6WRlf6pGq+LZ/XHFZKPFGtMJ2o5nHY+pkCqXcwhnOLx5",
	"/fc3LpY5o3R4cDQgTkWJNcjLJYfqaGWlxtej1kiPcdV8fACGUTnlyg5HBU5ajva17U3JuedZ2eebsSly",
	"TI9bpVT7BAwS7Di7hAywgOgaC50z2Vz+LxRhASNBVKCap92WQzC/hhRPEnAlXR/lWbT2TIOOb+r8IyVt",
	"CL5tWW1yl4vWzS3+Jv32IMdw6C0gOJHVliJui890q8iYuZ7LbO0Nz0WEZwleXLceFc0x3tH70Bv2Bo9y",
	"RqNfh1WAcNnmNuohIe91hK6crkOa14hWbiNGAliXTKs725ZqvbLtYpEtWqyULiQZozFJ4AGxfeAqGMaH",
	"ku+9pDAGlF2ptkVR92LNMythbcTQxbk7SJKblN6lo/ZqNCHpTb0q7IpcU+NIKmjWiKutGTXLMIxaY7OL",
	"pGDZZ8aZEBkfB4Hq+8woFwHOSHB7VGbpwFniSWRJU9M4KMcdRATzjDJ8YIqbIDU+CIaUjXICXyPutrnW",
	"Ht9MYEqVLZHxEc81kmZjfU7Dm3elO3vNNIr8QfFdATY8wI34qropOBoUWg5J3H6kqXkgyxISqjI/MOeh",
	"v/3B1YIdEu7iWNsS9aVq6esVKIhQM36G8B9lOVxWv0XJWxz2cEbQGL0+OFS0y7CYKWcFB9KxI+XZwF7d",
	"U315FAEPGcn0ER59ohGcSQGlUx9lziI0Rh9BfIUk+U2q+WS0SON4RlOu4/JKN3GsysX2lHLQ+N66rFlv",
	"/9CeccP1vlye6xYFnnLpaMtodCU/1NxQW0xOP3yFyamW6HLE11KPX7vm++a2rRKxECyvHsWL1oRNN14W",
	"V2vajT463iCEql/tmPgsvcUJibx/5cAW3kXlQgXieOMgjjutr/q3Sx+92bgP3rT5wNXQ7CZzsb3hXMyC",
	"hE5JavptTSafq8+rLL6gXJxk5D9HJ7mYGRGmrwl+odFiY6arO5NlfR8ULIdlg/XrRduxaTrs9j7nYQic",
	"x3myE14XFy+ecqkCcLRxAEddAMzFp0eZd2GulfaL3YohTlrTXHTyWn7vI7aW2TrVaC5qXOu3j6lmYVHP",
	"OS18r2p/FcJuMy+Nql0v4aPN+lVa7mkvRHuyfN9uHMDbVstPEgY4Wni//iBc8L1ftSFNYzI1V0dlxy+C",
	"BAQ02f1B/buHvU9S3rtU8qs010KK6O+1eiVthLe7rC1gngYSPa0kUruFf8yKzPb8vhZlmu7oaum7TxAf",
	"QdjU5t454cJ1mhjK7vUsH9QLsJdqszHTFZbCnF2ycT+54E7lJkPL7Q7uOre8MrO7KbH59F4jwQ6yvL3Y",
	"jZ+e+k67j9y2Un0Et8Gchjet7ZOPkEpOg/e7lGrb9D7AbfF9uwyTk0RYYM/AelA2653mRJX/3gdIycOi",
	"2DtDf7QiuPVelG1Qj6bJ4mUzdgyKl+PO4F3Kr94HLPAEc+iKnpLceh2m8aye5J9k8PRVDg+qJ09t5fWX",
	"tJDpKKlPtbZTI7jdMBpET7Yns7NyWp4mAx3lvS2nC2Z31FCnbj6X9VKTzVuolcrXhruolE6f18/O1s9P",
	"sHBa8wRJp8E9iZatGf/9DMIbj8Sq1+gR7p2aca3Zv7baSDo9i9a+AyPRdi+/9NvqtnjWrNzFOrrAYta4",
	"8npeSvu2lBJKb/IsuDfvd9pX0bmS9F5cwpwKCM5lIffS3b43q0gP+WL/9GedFVS+KdrqOire8LljWcbx",
	"ad0Z7zWPi2fFNotrD536Hn94+uWSm7Lm8cerw20+/xj06OOVfvyyR54vYdecL+tZ3nvPd0F5x3XmhdKx",
	"tapWIdtFTSvt2rM7vkfKwZ+oLrfO6XQKkXeW7hmXNWubRC5LyZ6bPRXZycI7+9DVg1C83ljxeLwFcu7y",
	"6s+d4/7qRaJy+74mV7MsOq79Ophvsuhmab8551R5wBGSJ1rr/RR0tHZp84tc3rVJy0PKLXiXhawnqLsA",
	"sbbqy1Lv9jv+BSqN8vnZxTPRUcXq9hbxSRT1M7osqet83kpZXf06fhe1demK547x80pyryQrbQgyh4Sk",
	"0HGpL7x/G6G2wsYSWK+yKf5g2Z+ubgY9fNJlTv+Lp9KavU/65S/EW0N3kiTqwMm9FzFlXgSTfPqyNY5K",
	"8lEeoen2Yn8sSvz7323TPzubdy+l9zljkIruBrEy+HdAO2jv2vjs0v/R3oDud3ukNeydN20y8Mqs7uOh",
	"CvujHA/rv18c/psA9XcSl+pPuj3fKzzde4WK8oH5mXl3Fjo1Uh6NB2x9Z1E5YCe9kkEZrPa3LvoTmbHI",
	"ekK9+6vnn4xmQ0i2JsX+agR7ptdD6FXe1bWS6xwLeZhVHdyhDDO3d+vzy/85D062k3bGweA5lfcuguXy",
	"fwEAAP//N7BjjrBcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
