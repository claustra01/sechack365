// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Follow defines model for follow.
type Follow struct {
	CreatedAt  time.Time `json:"created_at"`
	FollowerId string    `json:"follower_id"`
	Id         string    `json:"id"`
	TargetId   string    `json:"target_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *struct {
		Host          *string `json:"host,omitempty"`
		LocalUsername *string `json:"local_username,omitempty"`
		PublicKey     *string `json:"public_key,omitempty"`
	} `json:"activitypub,omitempty"`
	Nostr *struct {
		PublicKey *string `json:"public_key,omitempty"`
	} `json:"nostr,omitempty"`
}

// Newlike defines model for newlike.
type Newlike struct {
	PostId   string `json:"post_id"`
	Reaction string `json:"reaction"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// Post defines model for post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	LikeCount *int      `json:"like_count,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	User      PostUser  `json:"user"`
}

// PostUser defines model for post-user.
type PostUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1FollowsFollowJSONRequestBody defines body for PostApiV1FollowsFollow for application/json ContentType.
type PostApiV1FollowsFollowJSONRequestBody = Follow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsLikeJSONRequestBody defines body for PostApiV1ReactionsLike for application/json ContentType.
type PostApiV1ReactionsLikeJSONRequestBody = Newlike

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AwAA///Bspcba08AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
