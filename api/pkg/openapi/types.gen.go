// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Article defines model for article.
type Article struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	Title     string     `json:"title"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// ArticleComment defines model for article-comment.
type ArticleComment struct {
	ArticleId string     `json:"article_id"`
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewArticle defines model for new-article.
type NewArticle struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownNostrJsonParams defines parameters for GetWellKnownNostrJson.
type GetWellKnownNostrJsonParams struct {
	Name string `form:"name" json:"name"`
}

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1ArticlesJSONRequestBody defines body for PostApiV1Articles for application/json ContentType.
type PostApiV1ArticlesJSONRequestBody = NewArticle

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
