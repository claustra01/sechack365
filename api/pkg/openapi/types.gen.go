// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           *Actor_Context  `json:"\@context,omitempty"`
	Icon              *ActorIcon      `json:"icon,omitempty"`
	Id                *string         `json:"id,omitempty"`
	Inbox             *string         `json:"inbox,omitempty"`
	Name              *string         `json:"name,omitempty"`
	Outbox            *string         `json:"outbox,omitempty"`
	PrefferedUsername *string         `json:"prefferedUsername,omitempty"`
	PublicKey         *ActorPublicKey `json:"publicKey,omitempty"`
	Summary           *string         `json:"summary,omitempty"`
	Type              *string         `json:"type,omitempty"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           *string `json:"id,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	PublicKeyPem *string `json:"publicKeyPem,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Error      *string `json:"error,omitempty"`
	StatusCode *int    `json:"status_code,omitempty"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          *NodeinfoMetadata `json:"metadata,omitempty"`
	OpenRegistrations *bool             `json:"openRegistrations,omitempty"`
	Protocols         *[]string         `json:"protocols,omitempty"`
	Services          *NodeinfoService  `json:"services,omitempty"`
	Software          *NodeinfoSoftware `json:"software,omitempty"`
	Usage             *NodeinfoUsage    `json:"usage,omitempty"`
	Version           *string           `json:"version,omitempty"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  *map[string]interface{} `json:"inbound,omitempty"`
	Outbound *map[string]interface{} `json:"outbound,omitempty"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users *struct {
		Total *int `json:"total,omitempty"`
	} `json:"users,omitempty"`
}

// User defines model for user.
type User struct {
	CreateAt       *time.Time `json:"create_at,omitempty"`
	DisplayName    *string    `json:"display_name,omitempty"`
	HashedPassword *string    `json:"hashed_password,omitempty"`
	Host           *string    `json:"host,omitempty"`
	Icon           *string    `json:"icon,omitempty"`
	Id             *string    `json:"id,omitempty"`
	Profile        *string    `json:"profile,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	UpdateAt       *time.Time `json:"update_at,omitempty"`
	Username       *string    `json:"username,omitempty"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links *[]WellknownNodeinfoLink `json:"links,omitempty"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href *string `json:"href,omitempty"`
	Rel  *string `json:"rel,omitempty"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   *[]WellknownWebfingerLink `json:"links,omitempty"`
	Subject *string                   `json:"subject,omitempty"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href *string `json:"href,omitempty"`
	Rel  *string `json:"rel,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Id defines model for id.
type Id = string

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bNhT+KwG3t8mWkzp70FM3YJegQze0yPrQFgFNHtmsKZIhKTuGof8+kLJuE2VL",
	"aNKnvhRNeC7f+c5VOSIiMyUFCGtQckQKa5yBBe1/YtT/K1CCFLYbFCGBM0CJe4iQhsecaaAosTqHCBmy",
	"gQw7DXtQTspYzcQaFUWEcgO61A3aq5/PWYUnnCnuxDNJtq+5JJhvpLEoCjjcwyplYg269viYgz40LjUY",
	"mWsy1iUmxCYX/RaVsqcPEyu9f6WlAm0Z+F9/+vSaSGHhybqfpIC/U5R87LEWHRGzkJkAobVjrDU+oOJz",
	"ESFGpHCiP2pIUYJ+iJvExidMsQc085JOgwZNM7GST8GXKoG9B5nbIR2lIU1BA71vVUBfKl9xRt7AYVwE",
	"jbgjPM8yrA9naAoV5Ok3cvUFiHWiLW56GRswE6Fc80nmO3F2fQxkQ+5FWcPDnP0D2dcGD1pLPVsuFn1c",
	"/qnbC79ievUOHnMI9UCEjMU2Nw9EUujoLReLWpoJC645z6JZjkLzVtqr32Uu6DQsyylYbkcycyesq3J+",
	"9R70DvTVb15kAq7bsRwJSYGJVPZhZWAxxRZfaqXKwqxWcOWmQLyDNTNWY8uk8BYppDjnFiUp5gZqMCsp",
	"OWBRdrm0kkheVnI1tWo9V/1sx+xB5asQG91pFiEDesdIGc6oEE4KXlemdo81jNetFPyawuvxmqV0EaEd",
	"aMPKwdHEfDNfBDfTYCpn7cwNS1Wx9ieIWPk2CGn7CR1+PAupzWbXWzXLm4ANkA0m21c/34ZyHORoMb+e",
	"zFKdoy4ed0KYwOiWFrdn9JmmCnl1VvtGiQZs4QH7BZ5Knbn/IYotzCzzV0wvfMqM4vjwMLgCN9hsgD4o",
	"bMxe6vAy8FdHcGef1lb/gQ5sZZkyDkNvvpfDC0/RqZHnw4s/xPgeON8KuRez4RHHmdh2R825fu1bnDkD",
	"/cEzDk6p3MO08Qjaxb2xVpkkjuuDMcaKxbvreoDEwRHh7lHet5TEtd6cMmyU1HhetWcsqnDj0WOniaxz",
	"Kz8P07XJAard2VYi+d+eGHNljwtmap56afITJb4elSEDPB3ebJ0QleKM+OUaV2vxpy9GijGBFv4+L1vC",
	"MutvjvdA/qzHbj1lT6P1tNKxYihBr+YLXxzu28tzEc8dbzNPXNxutzWU3yYKyjPgjqIE/QH2A3D+xkm/",
	"rYQdF0ZJYUp2b8pDyX/fCG+jHa8PMzm2PrCm9a0joPAkdJB36vci9A+1dNT53P0YRtOItPwUn79J3C2H",
	"PurlM3ppTv7K9vLZbS9Ptm+fHfftCXdZDKeG5VJucxUfq41TnKuHXxT79/ovr3Hf/PVhWkHUq+1F68Hf",
	"IN8LYEQBdBbrpdxXI+xm8ZJDLDC62uvlIsp7L/WVAEct77LMejfRN0xfuXCPjBbjaLmjkzuW0am92t3R",
	"o8Ms//bnovve+C9VOUXxXwAAAP//HAbgsr8WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
