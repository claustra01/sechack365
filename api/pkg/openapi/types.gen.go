// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Actor defines model for actor.
type Actor struct {
	Context           Actor_Context  `json:"@context"`
	Icon              ActorIcon      `json:"icon"`
	Id                string         `json:"id"`
	Inbox             string         `json:"inbox"`
	Name              string         `json:"name"`
	Outbox            string         `json:"outbox"`
	PreferredUsername string         `json:"preferredUsername"`
	PublicKey         ActorPublicKey `json:"publicKey"`
	Summary           string         `json:"summary"`
	Type              string         `json:"type"`
}

// ActorContext0 defines model for .
type ActorContext0 = string

// ActorContext1 defines model for .
type ActorContext1 = []string

// Actor_Context defines model for Actor.Context.
type Actor_Context struct {
	union json.RawMessage
}

// ActorIcon defines model for actor-icon.
type ActorIcon struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// ActorPublicKey defines model for actor-publicKey.
type ActorPublicKey struct {
	Id           string `json:"id"`
	Owner        string `json:"owner"`
	PublicKeyPem string `json:"publicKeyPem"`
	Type         string `json:"type"`
}

// ApIdentifier defines model for ap-identifier.
type ApIdentifier struct {
	Host          string `json:"host"`
	LocalUsername string `json:"local_username"`
	PublicKey     string `json:"public_key"`
}

// Article defines model for article.
type Article struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	Title     string     `json:"title"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// ArticleComment defines model for article-comment.
type ArticleComment struct {
	ArticleId string     `json:"article_id"`
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// Auth defines model for auth.
type Auth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error400 defines model for error-400.
type Error400 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error401 defines model for error-401.
type Error401 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error404 defines model for error-404.
type Error404 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error409 defines model for error-409.
type Error409 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Error500 defines model for error-500.
type Error500 struct {
	Message    string `json:"message"`
	StatusCode int    `json:"status_code"`
}

// Found defines model for found.
type Found struct {
	Found bool `json:"found"`
}

// Identifiers defines model for identifiers.
type Identifiers struct {
	Activitypub *ApIdentifier    `json:"activitypub,omitempty"`
	Nostr       *NostrIdentifier `json:"nostr,omitempty"`
}

// NewArticle defines model for new-article.
type NewArticle struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// NewReaction defines model for new-reaction.
type NewReaction struct {
	PostId string `json:"post_id"`
	Type   string `json:"type"`
}

// Newfollow defines model for newfollow.
type Newfollow struct {
	TargetId string `json:"target_id"`
}

// Newpost defines model for newpost.
type Newpost struct {
	Content string `json:"content"`
}

// Nodeinfo defines model for nodeinfo.
type Nodeinfo struct {
	Metadata          NodeinfoMetadata `json:"metadata"`
	OpenRegistrations bool             `json:"openRegistrations"`
	Protocols         []string         `json:"protocols"`
	Services          NodeinfoService  `json:"services"`
	Software          NodeinfoSoftware `json:"software"`
	Usage             NodeinfoUsage    `json:"usage"`
	Version           string           `json:"version"`
}

// NodeinfoMetadata defines model for nodeinfo-metadata.
type NodeinfoMetadata = map[string]interface{}

// NodeinfoService defines model for nodeinfo-service.
type NodeinfoService struct {
	Inbound  map[string]interface{} `json:"inbound"`
	Outbound map[string]interface{} `json:"outbound"`
}

// NodeinfoSoftware defines model for nodeinfo-software.
type NodeinfoSoftware struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

// NodeinfoUsage defines model for nodeinfo-usage.
type NodeinfoUsage struct {
	Users NodeinfoUsageUsers `json:"users"`
}

// NodeinfoUsageUsers defines model for nodeinfo-usage-users.
type NodeinfoUsageUsers struct {
	Total int `json:"total"`
}

// NostrIdentifier defines model for nostr-identifier.
type NostrIdentifier struct {
	Npub string `json:"npub"`
}

// NostrRelay defines model for nostr-relay.
type NostrRelay struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	IsEnable  bool      `json:"is_enable"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Post defines model for post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt time.Time  `json:"updated_at"`
	User      SimpleUser `json:"user"`
}

// SimpleUser defines model for simple-user.
type SimpleUser struct {
	DisplayName string `json:"display_name"`
	Icon        string `json:"icon"`
	Protocol    string `json:"protocol"`
	Username    string `json:"username"`
}

// User defines model for user.
type User struct {
	CreatedAt     time.Time   `json:"created_at"`
	DisplayName   string      `json:"display_name"`
	FollowCount   int         `json:"follow_count"`
	FollowerCount int         `json:"follower_count"`
	Icon          string      `json:"icon"`
	Id            string      `json:"id"`
	Identifiers   Identifiers `json:"identifiers"`
	PostCount     int         `json:"post_count"`
	Profile       string      `json:"profile"`
	Protocol      string      `json:"protocol"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Username      string      `json:"username"`
}

// WellknownNodeinfo defines model for wellknown-nodeinfo.
type WellknownNodeinfo struct {
	Links []WellknownNodeinfoLink `json:"links"`
}

// WellknownNodeinfoLink defines model for wellknown-nodeinfo-link.
type WellknownNodeinfoLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
}

// WellknownWebfinger defines model for wellknown-webfinger.
type WellknownWebfinger struct {
	Links   []WellknownWebfingerLink `json:"links"`
	Subject string                   `json:"subject"`
}

// WellknownWebfingerLink defines model for wellknown-webfinger-link.
type WellknownWebfingerLink struct {
	Href string `json:"href"`
	Rel  string `json:"rel"`
	Type string `json:"type"`
}

// Id defines model for id.
type Id = string

// Offset defines model for offset.
type Offset = int

// Username defines model for username.
type Username = string

// Webfinger defines model for webfinger.
type Webfinger = string

// GetWellKnownNostrJsonParams defines parameters for GetWellKnownNostrJson.
type GetWellKnownNostrJsonParams struct {
	Name string `form:"name" json:"name"`
}

// GetWellKnownWebfingerParams defines parameters for GetWellKnownWebfinger.
type GetWellKnownWebfingerParams struct {
	Resource Webfinger `form:"resource" json:"resource"`
}

// PostApiV1ImagesUploadMultipartBody defines parameters for PostApiV1ImagesUpload.
type PostApiV1ImagesUploadMultipartBody struct {
	Image *openapi_types.File `json:"image,omitempty"`
}

// GetApiV1TimelineParams defines parameters for GetApiV1Timeline.
type GetApiV1TimelineParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UsersIdPostsParams defines parameters for GetApiV1UsersIdPosts.
type GetApiV1UsersIdPostsParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1ArticlesJSONRequestBody defines body for PostApiV1Articles for application/json ContentType.
type PostApiV1ArticlesJSONRequestBody = NewArticle

// PostApiV1AuthLoginJSONRequestBody defines body for PostApiV1AuthLogin for application/json ContentType.
type PostApiV1AuthLoginJSONRequestBody = Auth

// PostApiV1AuthRegisterJSONRequestBody defines body for PostApiV1AuthRegister for application/json ContentType.
type PostApiV1AuthRegisterJSONRequestBody = Auth

// PostApiV1ConfigsNostrRelayJSONRequestBody defines body for PostApiV1ConfigsNostrRelay for application/json ContentType.
type PostApiV1ConfigsNostrRelayJSONRequestBody = NostrRelay

// DeleteApiV1FollowsJSONRequestBody defines body for DeleteApiV1Follows for application/json ContentType.
type DeleteApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1FollowsJSONRequestBody defines body for PostApiV1Follows for application/json ContentType.
type PostApiV1FollowsJSONRequestBody = Newfollow

// PostApiV1ImagesUploadMultipartRequestBody defines body for PostApiV1ImagesUpload for multipart/form-data ContentType.
type PostApiV1ImagesUploadMultipartRequestBody PostApiV1ImagesUploadMultipartBody

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = Newpost

// PostApiV1ReactionsJSONRequestBody defines body for PostApiV1Reactions for application/json ContentType.
type PostApiV1ReactionsJSONRequestBody = NewReaction

// AsActorContext0 returns the union data inside the Actor_Context as a ActorContext0
func (t Actor_Context) AsActorContext0() (ActorContext0, error) {
	var body ActorContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext0 overwrites any union data inside the Actor_Context as the provided ActorContext0
func (t *Actor_Context) FromActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext0 performs a merge with any union data inside the Actor_Context, using the provided ActorContext0
func (t *Actor_Context) MergeActorContext0(v ActorContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsActorContext1 returns the union data inside the Actor_Context as a ActorContext1
func (t Actor_Context) AsActorContext1() (ActorContext1, error) {
	var body ActorContext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActorContext1 overwrites any union data inside the Actor_Context as the provided ActorContext1
func (t *Actor_Context) FromActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActorContext1 performs a merge with any union data inside the Actor_Context, using the provided ActorContext1
func (t *Actor_Context) MergeActorContext1(v ActorContext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Actor_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Actor_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dILF4n8BAAD//xsxPYkhbwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
